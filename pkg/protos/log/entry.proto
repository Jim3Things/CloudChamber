// This file contains the trace log entry formats used by CloudChamber when
// queuing to the production display
//
// CloudChamber will display the trace message, may have an annotation as to
// why the event occurred, when it occurred, and the modules impacted by this
// event, and in what why.
//
// So, for instance, an event may specify that the scheduler has made a choice
// for placement, the annotation would describe how that choice was made, the
// time would indicate when, and the impacted modules would include the
// scheduler (for execute), the target workload inventory store (for modify),
// and the internal escrow usage state (for modify).
//
// These entries need to be sufficient to drive what gets highlighted and shown
// on the CloudChamber display.

syntax = "proto3";

package log;

option go_package = "github.com/Jim3Things/CloudChamber/pkg/protos/log";

// Describe the type of impact that this event has on a module.
enum impact {
    Invalid = 0;
    Read = 1;
    Create = 2;
    Modify = 3;
    Delete = 4;
    Execute = 5;
}

enum severity {
    Debug = 0;

    // This is the severity use to denote an explanatory entry
    Reason = 1;

    Info = 2;
    Warning = 3;
    Error = 4;
    Fatal = 5;
}

// Describe an impacted module
message module {
    impact impact = 1;
    string name = 2;
}

// Define an individual trace event
message event {
    // Simulated time when it was logged.
    int64 tick = 1;

    // Event severity
    severity severity = 2;

    // Label to quickly mark the event
    string name = 3;

    // The event text itself.
    string text = 4;

    // Formatted caller's stack trace
    string stack_trace = 5;

    // The set of modules impacted, and the type of impact.
    repeated module impacted = 6;

    // True, if this event denotes a start child span
    bool span_start = 7;

    // Child's span ID.  Ignored if span_start is false.
    string span_id = 8;
}

// Describe a full correlated span, consisting of zero or more events.
message entry {
    // Name of the span
    string name = 1;

    // The IDs for the span, and its parent
    string spanID = 2;
    string parentID = 3;
    string traceID = 4;

    // Final status of the span
    string status = 5;

    // Formatted stack trace
    string stack_trace = 6;

    // The set of events emitted by this span
    repeated event event = 7;

    // True, if this span represents internal-only operations.
    bool infrastructure = 8;

    // Friendly string describing the purpose of the logic covered by this
    // entry.
    string reason = 9;
}
