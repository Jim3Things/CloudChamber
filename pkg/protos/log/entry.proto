// This file contains the trace log entry formats used by CloudChamber when
// queuing to the production display
//
// CloudChamber will display the trace message, may have an annotation as to
// why the event occurred, when it occurred, and the modules impacted by this
// event, and in what why.
//
// So, for instance, an event may specify that the scheduler has made a choice
// for placement, the annotation would describe how that choice was made, the
// time would indicate when, and the impacted modules would include the
// scheduler (for execute), the target workload inventory store (for modify),
// and the internal escrow usage state (for modify).
//
// These entries need to be sufficient to drive what gets highlighted and shown
// on the CloudChamber display.

syntax = "proto3";

package log;

option go_package = "github.com/Jim3Things/CloudChamber/pkg/protos/log";
option csharp_namespace = "CloudChamber.Protos.Log";

// Describe the type of impact that this event has on a module.
enum Impact {
    Invalid = 0;
    Read = 1;
    Create = 2;
    Modify = 3;
    Delete = 4;
    Execute = 5;
}

// Describe the actions to take when reading an event entry.
enum Action {
    // Trace is the most common type of event.  The contents are added to a serial
    // list in the span, and the formatters will display the entry's data as a
    // child trace event.
    Trace = 0;

    // UpdateSpanName and UpdateReason are directives to edit the containing span
    // information.  The first replaces the span's name field, and the second
    // replaces the span's reason text. This allows for better descriptions for a
    // span once the details have been better understood - e.g. 'logging in a user'
    // vs. 'logging in user "admin"'.
    UpdateSpanName = 1;
    UpdateReason = 2;

    // SpanStart is used to place the child span in the correct spot in the
    // sequence of events in the containing span.  It identifies the child span's
    // ID.  Structured formatters will expand the child span at this point in the
    // sequence in order to keep a time order.  Note that parent/child span
    // relationships are strong - they can safely assume that both spans will
    // complete, they will execute in the same process, and that completion of the
    // overall trace ID is not complete until both are complete.
    SpanStart = 3;

    // AddLink is used to place a the request point that may result in a linked
    // span.  It has an associated ID that is assigned by the active span at the
    // point of the request, as the future linked span id cannot yet be known.
    // Note that linked spans have a much looser relationship than parent/child
    // spans.  The linked span may not be required to complete a logical trace
    // sequence.  It may not execute in the same process as the initiator.  It
    // may not even execute.  Consequently, structured formatters consider the
    // linked information as soft (optional) parent/child relationships.  If they
    // can put them into a logical execution tree, they do so.  If they cannot,
    // then they do not.
    AddLink = 4;
}

enum Severity {
    Debug = 0;

    // This is the severity use to denote a purely explanatory entry
    Reason = 1;

    Info = 2;
    Warning = 3;
    Error = 4;
    Fatal = 5;
}

// Describe an impacted module
message Module {
    Impact impact = 1;
    string name = 2;
}

// Define an individual trace event
message Event {
    // Simulated time when it was logged.
    int64 tick = 1;

    // Event severity
    Severity severity = 2;

    // Label to quickly mark the event
    string name = 3;

    // The event text itself.
    string text = 4;

    // Formatted caller's stack trace
    string stack_trace = 5;

    // The set of modules impacted, and the type of impact.
    repeated Module impacted = 6;

    // Action to take when this trace is encountered.
    Action event_action = 7;

    // Child's span ID.  Ignored if the action is not SpanStart.
    string span_id = 8;

    // Outgoing link ID.  Ignored if the action is not AddLink.
    string link_id = 9;
}

// Describe a full correlated span, consisting of zero or more events.
message Entry {
    // Name of the span
    string name = 1;

    // The IDs for the span, and its parent
    string spanID = 2;
    string parentID = 3;
    string traceID = 4;

    // Final status of the span
    string status = 5;

    // Formatted stack trace
    string stack_trace = 6;

    // The set of events emitted by this span
    repeated Event event = 7;

    // True, if this span represents internal-only operations.
    bool infrastructure = 8;

    // Friendly string describing the purpose of the logic covered by this
    // entry.
    string reason = 9;

    // The link tag associated with an AddLink event at the source span,
    // if present.
    string starting_link = 10;

    // The link span ID and trace ID identify the active span at the point
    // where the request to start a new related span was made.
    string link_spanID = 11;
    string link_traceID = 12;
}
