// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: github.com/Jim3Things/CloudChamber/pkg/protos/monitor/monitor.proto

package monitor

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _monitor_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Actual with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Actual) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetRacks() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ActualValidationError{
					field:  fmt.Sprintf("Racks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ActualValidationError is the validation error returned by Actual.Validate if
// the designated constraints aren't met.
type ActualValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActualValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActualValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActualValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActualValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActualValidationError) ErrorName() string { return "ActualValidationError" }

// Error satisfies the builtin error interface
func (e ActualValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActual.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActualValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActualValidationError{}

// Validate checks the field values on Desired with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Desired) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetRacks() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DesiredValidationError{
					field:  fmt.Sprintf("Racks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// DesiredValidationError is the validation error returned by Desired.Validate
// if the designated constraints aren't met.
type DesiredValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DesiredValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DesiredValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DesiredValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DesiredValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DesiredValidationError) ErrorName() string { return "DesiredValidationError" }

// Error satisfies the builtin error interface
func (e DesiredValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDesired.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DesiredValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DesiredValidationError{}

// Validate checks the field values on ActualRack with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ActualRack) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if v, ok := interface{}(m.GetPdu()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActualRackValidationError{
				field:  "Pdu",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetTor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActualRackValidationError{
				field:  "Tor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetBlades()) < 1 {
		return ActualRackValidationError{
			field:  "Blades",
			reason: "value must contain at least 1 pair(s)",
		}
	}

	for key, val := range m.GetBlades() {
		_ = val

		// no validation rules for Blades[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ActualRackValidationError{
					field:  fmt.Sprintf("Blades[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ActualRackValidationError is the validation error returned by
// ActualRack.Validate if the designated constraints aren't met.
type ActualRackValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActualRackValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActualRackValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActualRackValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActualRackValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActualRackValidationError) ErrorName() string { return "ActualRackValidationError" }

// Error satisfies the builtin error interface
func (e ActualRackValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActualRack.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActualRackValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActualRackValidationError{}

// Validate checks the field values on ActualRackBaseStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ActualRackBaseStatus) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := ActualHealth_name[int32(m.GetHealth())]; !ok {
		return ActualRackBaseStatusValidationError{
			field:  "Health",
			reason: "value must be one of the defined enum values",
		}
	}

	if v, ok := interface{}(m.GetLastStart()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActualRackBaseStatusValidationError{
				field:  "LastStart",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ActualRackBaseStatusValidationError is the validation error returned by
// ActualRackBaseStatus.Validate if the designated constraints aren't met.
type ActualRackBaseStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActualRackBaseStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActualRackBaseStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActualRackBaseStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActualRackBaseStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActualRackBaseStatusValidationError) ErrorName() string {
	return "ActualRackBaseStatusValidationError"
}

// Error satisfies the builtin error interface
func (e ActualRackBaseStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActualRackBaseStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActualRackBaseStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActualRackBaseStatusValidationError{}

// Validate checks the field values on ActualRackBladeDetails with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ActualRackBladeDetails) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActualRackBladeDetailsValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPresent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActualRackBladeDetailsValidationError{
				field:  "Present",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUsed()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActualRackBladeDetailsValidationError{
				field:  "Used",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ActualRackBladeDetailsValidationError is the validation error returned by
// ActualRackBladeDetails.Validate if the designated constraints aren't met.
type ActualRackBladeDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActualRackBladeDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActualRackBladeDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActualRackBladeDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActualRackBladeDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActualRackBladeDetailsValidationError) ErrorName() string {
	return "ActualRackBladeDetailsValidationError"
}

// Error satisfies the builtin error interface
func (e ActualRackBladeDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActualRackBladeDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActualRackBladeDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActualRackBladeDetailsValidationError{}

// Validate checks the field values on ActualRackPduDetails with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ActualRackPduDetails) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActualRackPduDetailsValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TorCable

	if len(m.GetCables()) < 1 {
		return ActualRackPduDetailsValidationError{
			field:  "Cables",
			reason: "value must contain at least 1 pair(s)",
		}
	}

	return nil
}

// ActualRackPduDetailsValidationError is the validation error returned by
// ActualRackPduDetails.Validate if the designated constraints aren't met.
type ActualRackPduDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActualRackPduDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActualRackPduDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActualRackPduDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActualRackPduDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActualRackPduDetailsValidationError) ErrorName() string {
	return "ActualRackPduDetailsValidationError"
}

// Error satisfies the builtin error interface
func (e ActualRackPduDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActualRackPduDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActualRackPduDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActualRackPduDetailsValidationError{}

// Validate checks the field values on ActualRackTorDetails with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ActualRackTorDetails) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActualRackTorDetailsValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetCables()) < 1 {
		return ActualRackTorDetailsValidationError{
			field:  "Cables",
			reason: "value must contain at least 1 pair(s)",
		}
	}

	return nil
}

// ActualRackTorDetailsValidationError is the validation error returned by
// ActualRackTorDetails.Validate if the designated constraints aren't met.
type ActualRackTorDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActualRackTorDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActualRackTorDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActualRackTorDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActualRackTorDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActualRackTorDetailsValidationError) ErrorName() string {
	return "ActualRackTorDetailsValidationError"
}

// Error satisfies the builtin error interface
func (e ActualRackTorDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActualRackTorDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActualRackTorDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActualRackTorDetailsValidationError{}

// Validate checks the field values on DesiredRack with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DesiredRack) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if v, ok := interface{}(m.GetPdu()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DesiredRackValidationError{
				field:  "Pdu",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetTor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DesiredRackValidationError{
				field:  "Tor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetBlades()) < 1 {
		return DesiredRackValidationError{
			field:  "Blades",
			reason: "value must contain at least 1 pair(s)",
		}
	}

	for key, val := range m.GetBlades() {
		_ = val

		// no validation rules for Blades[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DesiredRackValidationError{
					field:  fmt.Sprintf("Blades[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// DesiredRackValidationError is the validation error returned by
// DesiredRack.Validate if the designated constraints aren't met.
type DesiredRackValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DesiredRackValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DesiredRackValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DesiredRackValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DesiredRackValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DesiredRackValidationError) ErrorName() string { return "DesiredRackValidationError" }

// Error satisfies the builtin error interface
func (e DesiredRackValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDesiredRack.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DesiredRackValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DesiredRackValidationError{}

// Validate checks the field values on DesiredRackBaseStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DesiredRackBaseStatus) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := DesiredHealth_name[int32(m.GetHealth())]; !ok {
		return DesiredRackBaseStatusValidationError{
			field:  "Health",
			reason: "value must be one of the defined enum values",
		}
	}

	if v, ok := interface{}(m.GetLastStart()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DesiredRackBaseStatusValidationError{
				field:  "LastStart",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DesiredRackBaseStatusValidationError is the validation error returned by
// DesiredRackBaseStatus.Validate if the designated constraints aren't met.
type DesiredRackBaseStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DesiredRackBaseStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DesiredRackBaseStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DesiredRackBaseStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DesiredRackBaseStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DesiredRackBaseStatusValidationError) ErrorName() string {
	return "DesiredRackBaseStatusValidationError"
}

// Error satisfies the builtin error interface
func (e DesiredRackBaseStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDesiredRackBaseStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DesiredRackBaseStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DesiredRackBaseStatusValidationError{}

// Validate checks the field values on DesiredRackBladeDetails with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DesiredRackBladeDetails) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DesiredRackBladeDetailsValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DesiredRackBladeDetailsValidationError is the validation error returned by
// DesiredRackBladeDetails.Validate if the designated constraints aren't met.
type DesiredRackBladeDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DesiredRackBladeDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DesiredRackBladeDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DesiredRackBladeDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DesiredRackBladeDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DesiredRackBladeDetailsValidationError) ErrorName() string {
	return "DesiredRackBladeDetailsValidationError"
}

// Error satisfies the builtin error interface
func (e DesiredRackBladeDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDesiredRackBladeDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DesiredRackBladeDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DesiredRackBladeDetailsValidationError{}

// Validate checks the field values on DesiredRackPduDetails with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DesiredRackPduDetails) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DesiredRackPduDetailsValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TorCable

	if len(m.GetCables()) < 1 {
		return DesiredRackPduDetailsValidationError{
			field:  "Cables",
			reason: "value must contain at least 1 pair(s)",
		}
	}

	return nil
}

// DesiredRackPduDetailsValidationError is the validation error returned by
// DesiredRackPduDetails.Validate if the designated constraints aren't met.
type DesiredRackPduDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DesiredRackPduDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DesiredRackPduDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DesiredRackPduDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DesiredRackPduDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DesiredRackPduDetailsValidationError) ErrorName() string {
	return "DesiredRackPduDetailsValidationError"
}

// Error satisfies the builtin error interface
func (e DesiredRackPduDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDesiredRackPduDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DesiredRackPduDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DesiredRackPduDetailsValidationError{}

// Validate checks the field values on DesiredRackTorDetails with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DesiredRackTorDetails) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DesiredRackTorDetailsValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetCables()) < 1 {
		return DesiredRackTorDetailsValidationError{
			field:  "Cables",
			reason: "value must contain at least 1 pair(s)",
		}
	}

	return nil
}

// DesiredRackTorDetailsValidationError is the validation error returned by
// DesiredRackTorDetails.Validate if the designated constraints aren't met.
type DesiredRackTorDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DesiredRackTorDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DesiredRackTorDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DesiredRackTorDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DesiredRackTorDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DesiredRackTorDetailsValidationError) ErrorName() string {
	return "DesiredRackTorDetailsValidationError"
}

// Error satisfies the builtin error interface
func (e DesiredRackTorDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDesiredRackTorDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DesiredRackTorDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DesiredRackTorDetailsValidationError{}
