// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/Jim3Things/CloudChamber/pkg/protos/monitor/monitor.proto

package monitor

import (
	context "context"
	fmt "fmt"
	common "github.com/Jim3Things/CloudChamber/pkg/protos/common"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// This message describes a health report from the inventory
type ActualHealth int32

const (
	Actual_Invalid     ActualHealth = 0
	Actual_Unavailable ActualHealth = 1
	Actual_Draining    ActualHealth = 2
	Actual_Healthy     ActualHealth = 3
	Actual_Removing    ActualHealth = 4
)

var ActualHealth_name = map[int32]string{
	0: "Invalid",
	1: "Unavailable",
	2: "Draining",
	3: "Healthy",
	4: "Removing",
}

var ActualHealth_value = map[string]int32{
	"Invalid":     0,
	"Unavailable": 1,
	"Draining":    2,
	"Healthy":     3,
	"Removing":    4,
}

func (x ActualHealth) String() string {
	return proto.EnumName(ActualHealth_name, int32(x))
}

func (ActualHealth) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_318189739c1c4c20, []int{0, 0}
}

// This message describes the desired health state to the inventory
type DesiredHealth int32

const (
	Desired_Invalid  DesiredHealth = 0
	Desired_Draining DesiredHealth = 1
	Desired_Stopped  DesiredHealth = 2
	Desired_Healthy  DesiredHealth = 3
	Desired_Removed  DesiredHealth = 4
)

var DesiredHealth_name = map[int32]string{
	0: "Invalid",
	1: "Draining",
	2: "Stopped",
	3: "Healthy",
	4: "Removed",
}

var DesiredHealth_value = map[string]int32{
	"Invalid":  0,
	"Draining": 1,
	"Stopped":  2,
	"Healthy":  3,
	"Removed":  4,
}

func (x DesiredHealth) String() string {
	return proto.EnumName(DesiredHealth_name, int32(x))
}

func (DesiredHealth) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_318189739c1c4c20, []int{1, 0}
}

type Actual struct {
	Items                []*ActualItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Actual) Reset()         { *m = Actual{} }
func (m *Actual) String() string { return proto.CompactTextString(m) }
func (*Actual) ProtoMessage()    {}
func (*Actual) Descriptor() ([]byte, []int) {
	return fileDescriptor_318189739c1c4c20, []int{0}
}

func (m *Actual) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Actual.Unmarshal(m, b)
}
func (m *Actual) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Actual.Marshal(b, m, deterministic)
}
func (m *Actual) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Actual.Merge(m, src)
}
func (m *Actual) XXX_Size() int {
	return xxx_messageInfo_Actual.Size(m)
}
func (m *Actual) XXX_DiscardUnknown() {
	xxx_messageInfo_Actual.DiscardUnknown(m)
}

var xxx_messageInfo_Actual proto.InternalMessageInfo

func (m *Actual) GetItems() []*ActualItem {
	if m != nil {
		return m.Items
	}
	return nil
}

type ActualBladeDetails struct {
	// specify which blade in the rack.
	// Note that full internal name for a blade is <rackname>-blade-<bladeId>
	Id                   int64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Present              *common.BladeCapacity `protobuf:"bytes,2,opt,name=present,proto3" json:"present,omitempty"`
	Used                 *common.BladeCapacity `protobuf:"bytes,3,opt,name=used,proto3" json:"used,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ActualBladeDetails) Reset()         { *m = ActualBladeDetails{} }
func (m *ActualBladeDetails) String() string { return proto.CompactTextString(m) }
func (*ActualBladeDetails) ProtoMessage()    {}
func (*ActualBladeDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_318189739c1c4c20, []int{0, 0}
}

func (m *ActualBladeDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ActualBladeDetails.Unmarshal(m, b)
}
func (m *ActualBladeDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ActualBladeDetails.Marshal(b, m, deterministic)
}
func (m *ActualBladeDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActualBladeDetails.Merge(m, src)
}
func (m *ActualBladeDetails) XXX_Size() int {
	return xxx_messageInfo_ActualBladeDetails.Size(m)
}
func (m *ActualBladeDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_ActualBladeDetails.DiscardUnknown(m)
}

var xxx_messageInfo_ActualBladeDetails proto.InternalMessageInfo

func (m *ActualBladeDetails) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ActualBladeDetails) GetPresent() *common.BladeCapacity {
	if m != nil {
		return m.Present
	}
	return nil
}

func (m *ActualBladeDetails) GetUsed() *common.BladeCapacity {
	if m != nil {
		return m.Used
	}
	return nil
}

type ActualPduDetails struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActualPduDetails) Reset()         { *m = ActualPduDetails{} }
func (m *ActualPduDetails) String() string { return proto.CompactTextString(m) }
func (*ActualPduDetails) ProtoMessage()    {}
func (*ActualPduDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_318189739c1c4c20, []int{0, 1}
}

func (m *ActualPduDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ActualPduDetails.Unmarshal(m, b)
}
func (m *ActualPduDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ActualPduDetails.Marshal(b, m, deterministic)
}
func (m *ActualPduDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActualPduDetails.Merge(m, src)
}
func (m *ActualPduDetails) XXX_Size() int {
	return xxx_messageInfo_ActualPduDetails.Size(m)
}
func (m *ActualPduDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_ActualPduDetails.DiscardUnknown(m)
}

var xxx_messageInfo_ActualPduDetails proto.InternalMessageInfo

type ActualTorDetails struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActualTorDetails) Reset()         { *m = ActualTorDetails{} }
func (m *ActualTorDetails) String() string { return proto.CompactTextString(m) }
func (*ActualTorDetails) ProtoMessage()    {}
func (*ActualTorDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_318189739c1c4c20, []int{0, 2}
}

func (m *ActualTorDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ActualTorDetails.Unmarshal(m, b)
}
func (m *ActualTorDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ActualTorDetails.Marshal(b, m, deterministic)
}
func (m *ActualTorDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActualTorDetails.Merge(m, src)
}
func (m *ActualTorDetails) XXX_Size() int {
	return xxx_messageInfo_ActualTorDetails.Size(m)
}
func (m *ActualTorDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_ActualTorDetails.DiscardUnknown(m)
}

var xxx_messageInfo_ActualTorDetails proto.InternalMessageInfo

type ActualItem struct {
	RackName  string               `protobuf:"bytes,1,opt,name=rack_name,json=rackName,proto3" json:"rack_name,omitempty"`
	Health    ActualHealth         `protobuf:"varint,2,opt,name=health,proto3,enum=monitor.ActualHealth" json:"health,omitempty"`
	LastStart *timestamp.Timestamp `protobuf:"bytes,3,opt,name=last_start,json=lastStart,proto3" json:"last_start,omitempty"`
	// Types that are valid to be assigned to Details:
	//	*ActualItem_Blade
	//	*ActualItem_Pdu
	//	*ActualItem_Tor
	Details              isActualItem_Details `protobuf_oneof:"details"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ActualItem) Reset()         { *m = ActualItem{} }
func (m *ActualItem) String() string { return proto.CompactTextString(m) }
func (*ActualItem) ProtoMessage()    {}
func (*ActualItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_318189739c1c4c20, []int{0, 3}
}

func (m *ActualItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ActualItem.Unmarshal(m, b)
}
func (m *ActualItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ActualItem.Marshal(b, m, deterministic)
}
func (m *ActualItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActualItem.Merge(m, src)
}
func (m *ActualItem) XXX_Size() int {
	return xxx_messageInfo_ActualItem.Size(m)
}
func (m *ActualItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ActualItem.DiscardUnknown(m)
}

var xxx_messageInfo_ActualItem proto.InternalMessageInfo

func (m *ActualItem) GetRackName() string {
	if m != nil {
		return m.RackName
	}
	return ""
}

func (m *ActualItem) GetHealth() ActualHealth {
	if m != nil {
		return m.Health
	}
	return Actual_Invalid
}

func (m *ActualItem) GetLastStart() *timestamp.Timestamp {
	if m != nil {
		return m.LastStart
	}
	return nil
}

type isActualItem_Details interface {
	isActualItem_Details()
}

type ActualItem_Blade struct {
	Blade *ActualBladeDetails `protobuf:"bytes,4,opt,name=blade,proto3,oneof"`
}

type ActualItem_Pdu struct {
	Pdu *ActualPduDetails `protobuf:"bytes,5,opt,name=pdu,proto3,oneof"`
}

type ActualItem_Tor struct {
	Tor *ActualTorDetails `protobuf:"bytes,6,opt,name=tor,proto3,oneof"`
}

func (*ActualItem_Blade) isActualItem_Details() {}

func (*ActualItem_Pdu) isActualItem_Details() {}

func (*ActualItem_Tor) isActualItem_Details() {}

func (m *ActualItem) GetDetails() isActualItem_Details {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *ActualItem) GetBlade() *ActualBladeDetails {
	if x, ok := m.GetDetails().(*ActualItem_Blade); ok {
		return x.Blade
	}
	return nil
}

func (m *ActualItem) GetPdu() *ActualPduDetails {
	if x, ok := m.GetDetails().(*ActualItem_Pdu); ok {
		return x.Pdu
	}
	return nil
}

func (m *ActualItem) GetTor() *ActualTorDetails {
	if x, ok := m.GetDetails().(*ActualItem_Tor); ok {
		return x.Tor
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ActualItem) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ActualItem_Blade)(nil),
		(*ActualItem_Pdu)(nil),
		(*ActualItem_Tor)(nil),
	}
}

// This message describes a command from the monitor to the
// inventory.  These take the form of desired states for
// specific items.  Any item not mentioned has no actions to
// take.
type Desired struct {
	Items                []*DesiredItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Desired) Reset()         { *m = Desired{} }
func (m *Desired) String() string { return proto.CompactTextString(m) }
func (*Desired) ProtoMessage()    {}
func (*Desired) Descriptor() ([]byte, []int) {
	return fileDescriptor_318189739c1c4c20, []int{1}
}

func (m *Desired) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Desired.Unmarshal(m, b)
}
func (m *Desired) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Desired.Marshal(b, m, deterministic)
}
func (m *Desired) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Desired.Merge(m, src)
}
func (m *Desired) XXX_Size() int {
	return xxx_messageInfo_Desired.Size(m)
}
func (m *Desired) XXX_DiscardUnknown() {
	xxx_messageInfo_Desired.DiscardUnknown(m)
}

var xxx_messageInfo_Desired proto.InternalMessageInfo

func (m *Desired) GetItems() []*DesiredItem {
	if m != nil {
		return m.Items
	}
	return nil
}

type DesiredItem struct {
	RackName             string               `protobuf:"bytes,1,opt,name=rack_name,json=rackName,proto3" json:"rack_name,omitempty"`
	Health               DesiredHealth        `protobuf:"varint,2,opt,name=health,proto3,enum=monitor.DesiredHealth" json:"health,omitempty"`
	LastStart            *timestamp.Timestamp `protobuf:"bytes,3,opt,name=last_start,json=lastStart,proto3" json:"last_start,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *DesiredItem) Reset()         { *m = DesiredItem{} }
func (m *DesiredItem) String() string { return proto.CompactTextString(m) }
func (*DesiredItem) ProtoMessage()    {}
func (*DesiredItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_318189739c1c4c20, []int{1, 0}
}

func (m *DesiredItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DesiredItem.Unmarshal(m, b)
}
func (m *DesiredItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DesiredItem.Marshal(b, m, deterministic)
}
func (m *DesiredItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DesiredItem.Merge(m, src)
}
func (m *DesiredItem) XXX_Size() int {
	return xxx_messageInfo_DesiredItem.Size(m)
}
func (m *DesiredItem) XXX_DiscardUnknown() {
	xxx_messageInfo_DesiredItem.DiscardUnknown(m)
}

var xxx_messageInfo_DesiredItem proto.InternalMessageInfo

func (m *DesiredItem) GetRackName() string {
	if m != nil {
		return m.RackName
	}
	return ""
}

func (m *DesiredItem) GetHealth() DesiredHealth {
	if m != nil {
		return m.Health
	}
	return Desired_Invalid
}

func (m *DesiredItem) GetLastStart() *timestamp.Timestamp {
	if m != nil {
		return m.LastStart
	}
	return nil
}

func init() {
	proto.RegisterEnum("monitor.ActualHealth", ActualHealth_name, ActualHealth_value)
	proto.RegisterEnum("monitor.DesiredHealth", DesiredHealth_name, DesiredHealth_value)
	proto.RegisterType((*Actual)(nil), "monitor.actual")
	proto.RegisterType((*ActualBladeDetails)(nil), "monitor.actual.blade_details")
	proto.RegisterType((*ActualPduDetails)(nil), "monitor.actual.pdu_details")
	proto.RegisterType((*ActualTorDetails)(nil), "monitor.actual.tor_details")
	proto.RegisterType((*ActualItem)(nil), "monitor.actual.item")
	proto.RegisterType((*Desired)(nil), "monitor.desired")
	proto.RegisterType((*DesiredItem)(nil), "monitor.desired.item")
}

func init() {
	proto.RegisterFile("github.com/Jim3Things/CloudChamber/pkg/protos/monitor/monitor.proto", fileDescriptor_318189739c1c4c20)
}

var fileDescriptor_318189739c1c4c20 = []byte{
	// 595 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x5d, 0x6b, 0xdb, 0x30,
	0x14, 0xad, 0x93, 0x34, 0x69, 0x6e, 0xfa, 0x11, 0xc4, 0xd6, 0x19, 0x97, 0xb1, 0x92, 0xa7, 0xd2,
	0x81, 0x3d, 0x52, 0x4a, 0x19, 0x7b, 0x5a, 0xb3, 0x41, 0x5b, 0xd8, 0x06, 0x4e, 0xf7, 0xb2, 0x97,
	0xa2, 0x58, 0xaa, 0x23, 0x6a, 0x49, 0x46, 0xbe, 0x0e, 0xe4, 0x61, 0xbf, 0x61, 0x2f, 0xfb, 0x25,
	0xfb, 0x33, 0xfb, 0x3b, 0x43, 0xfe, 0x28, 0x8d, 0xdb, 0x8e, 0x6d, 0xec, 0x49, 0x5c, 0x9d, 0x73,
	0xae, 0x8e, 0xce, 0x95, 0x0d, 0x93, 0x58, 0xe0, 0x3c, 0x9f, 0xf9, 0x91, 0x96, 0xc1, 0x85, 0x90,
	0x47, 0x97, 0x73, 0xa1, 0xe2, 0x2c, 0x98, 0x24, 0x3a, 0x67, 0x93, 0x39, 0x95, 0x33, 0x6e, 0x82,
	0xf4, 0x26, 0x0e, 0x52, 0xa3, 0x51, 0x67, 0x81, 0xd4, 0x4a, 0xa0, 0x36, 0xf5, 0xea, 0x17, 0xdb,
	0xa4, 0x57, 0x95, 0xde, 0xdb, 0xbf, 0xeb, 0x16, 0x69, 0x29, 0xb5, 0xaa, 0x96, 0xb2, 0x97, 0xb7,
	0x17, 0x6b, 0x1d, 0x27, 0xbc, 0xa4, 0xcc, 0xf2, 0xeb, 0x80, 0xcb, 0x14, 0x97, 0x15, 0xf8, 0xa2,
	0x09, 0xa2, 0x90, 0x3c, 0x43, 0x2a, 0xd3, 0x92, 0x30, 0xfa, 0xd9, 0x81, 0x2e, 0x8d, 0x30, 0xa7,
	0x09, 0x39, 0x84, 0x75, 0x81, 0x5c, 0x66, 0xae, 0xb3, 0xdf, 0x3e, 0x18, 0x8c, 0x9f, 0xf8, 0xb5,
	0xe7, 0x12, 0xf7, 0x2d, 0x18, 0x96, 0x14, 0xef, 0x2b, 0x6c, 0xcd, 0x12, 0xca, 0xf8, 0x15, 0xe3,
	0x48, 0x45, 0x92, 0x91, 0x6d, 0x68, 0x09, 0xe6, 0x3a, 0xfb, 0xce, 0x41, 0x3b, 0x6c, 0x09, 0x46,
	0x5e, 0x41, 0x2f, 0x35, 0x3c, 0xe3, 0x0a, 0xdd, 0xd6, 0xbe, 0x73, 0x30, 0x18, 0xef, 0xfa, 0x95,
	0xeb, 0x52, 0x17, 0xd1, 0x94, 0x46, 0x02, 0x97, 0x61, 0x4d, 0x23, 0x87, 0xd0, 0xc9, 0x33, 0xce,
	0xdc, 0xf6, 0x6f, 0xe9, 0x05, 0xc7, 0xdb, 0x82, 0x41, 0xca, 0xf2, 0xfa, 0x70, 0x5b, 0xa2, 0x36,
	0xb7, 0xe5, 0x8f, 0x16, 0x74, 0xac, 0x4d, 0xb2, 0x07, 0x7d, 0x43, 0xa3, 0x9b, 0x2b, 0x45, 0x25,
	0x2f, 0xbc, 0xf5, 0xc3, 0x0d, 0xbb, 0xf1, 0x91, 0x4a, 0x4e, 0x7c, 0xe8, 0xce, 0x39, 0x4d, 0x70,
	0x5e, 0x18, 0xdc, 0x1e, 0xef, 0x36, 0xef, 0x5b, 0xa2, 0x61, 0xc5, 0x22, 0xaf, 0x01, 0x12, 0x9a,
	0xe1, 0x55, 0x86, 0xd4, 0x60, 0xe5, 0xd2, 0xf3, 0xcb, 0x7c, 0xfd, 0x3a, 0x5f, 0xff, 0xb2, 0xce,
	0x37, 0xec, 0x5b, 0xf6, 0xd4, 0x92, 0xc9, 0x31, 0xac, 0x17, 0xd7, 0x70, 0x3b, 0x85, 0xea, 0x79,
	0xf3, 0xa4, 0x95, 0x28, 0xcf, 0xd6, 0xc2, 0x92, 0x4d, 0x02, 0x68, 0xa7, 0x2c, 0x77, 0xd7, 0x0b,
	0xd1, 0x5e, 0x53, 0x74, 0x27, 0x80, 0xb3, 0xb5, 0xd0, 0x32, 0xad, 0x00, 0xb5, 0x71, 0xbb, 0x0f,
	0x0b, 0xee, 0x44, 0x64, 0x05, 0xa8, 0xcd, 0x69, 0x1f, 0x7a, 0xd5, 0xce, 0xe8, 0x53, 0x1d, 0x07,
	0x19, 0x40, 0xef, 0x5c, 0x2d, 0x68, 0x22, 0xd8, 0x70, 0x8d, 0xec, 0xc0, 0xe0, 0xb3, 0xa2, 0x0b,
	0x2a, 0x12, 0x3a, 0x4b, 0xf8, 0xd0, 0x21, 0x9b, 0xb0, 0xf1, 0xce, 0x50, 0xa1, 0x84, 0x8a, 0x87,
	0x2d, 0xcb, 0x3d, 0x2b, 0x54, 0xcb, 0x61, 0xdb, 0x42, 0x21, 0x97, 0x7a, 0x61, 0xa1, 0xce, 0xe8,
	0x7b, 0xcb, 0x36, 0xcf, 0x84, 0xe1, 0x8c, 0xbc, 0x5c, 0x7d, 0x5a, 0x4f, 0x6f, 0xad, 0x55, 0x84,
	0x95, 0xb7, 0xf5, 0xcd, 0xf9, 0x93, 0xf1, 0x05, 0x8d, 0xf1, 0x3d, 0xbb, 0xd7, 0xf3, 0xbf, 0xcd,
	0x6f, 0x74, 0xf1, 0x70, 0x36, 0x77, 0xa3, 0x70, 0x2c, 0x34, 0x45, 0x9d, 0xa6, 0x9c, 0x35, 0x73,
	0x19, 0x40, 0xaf, 0xc8, 0x85, 0xb3, 0x61, 0x67, 0x7c, 0x0a, 0xbd, 0x0f, 0xa5, 0x51, 0x72, 0x02,
	0x9b, 0x21, 0x4f, 0xb5, 0xc1, 0x92, 0x4a, 0x76, 0x1a, 0x13, 0xf3, 0x76, 0xef, 0xd9, 0x7b, 0x6f,
	0xbf, 0xed, 0xf1, 0x12, 0xfa, 0xe7, 0x6a, 0xc1, 0x15, 0x6a, 0xb3, 0x24, 0x6f, 0xa0, 0x3f, 0xe5,
	0x38, 0xd1, 0xea, 0x5a, 0xc4, 0xe4, 0x11, 0xc5, 0x63, 0x9d, 0x48, 0x00, 0x30, 0xe5, 0x78, 0x49,
	0x4d, 0xcc, 0x31, 0x23, 0xc3, 0x66, 0x86, 0x5e, 0xd3, 0xd2, 0xe9, 0xc9, 0x97, 0xe3, 0x7f, 0xfa,
	0x01, 0xce, 0xba, 0x45, 0x7d, 0xf4, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x86, 0xf3, 0xac, 0xb1, 0x40,
	0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MonitorClient is the client API for Monitor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MonitorClient interface {
	ReportHealth(ctx context.Context, in *Actual, opts ...grpc.CallOption) (*empty.Empty, error)
}

type monitorClient struct {
	cc *grpc.ClientConn
}

func NewMonitorClient(cc *grpc.ClientConn) MonitorClient {
	return &monitorClient{cc}
}

func (c *monitorClient) ReportHealth(ctx context.Context, in *Actual, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/monitor.Monitor/ReportHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MonitorServer is the server API for Monitor service.
type MonitorServer interface {
	ReportHealth(context.Context, *Actual) (*empty.Empty, error)
}

// UnimplementedMonitorServer can be embedded to have forward compatible implementations.
type UnimplementedMonitorServer struct {
}

func (*UnimplementedMonitorServer) ReportHealth(ctx context.Context, req *Actual) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportHealth not implemented")
}

func RegisterMonitorServer(s *grpc.Server, srv MonitorServer) {
	s.RegisterService(&_Monitor_serviceDesc, srv)
}

func _Monitor_ReportHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Actual)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorServer).ReportHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitor.Monitor/ReportHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorServer).ReportHealth(ctx, req.(*Actual))
	}
	return interceptor(ctx, in, info, handler)
}

var _Monitor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "monitor.Monitor",
	HandlerType: (*MonitorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportHealth",
			Handler:    _Monitor_ReportHealth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/Jim3Things/CloudChamber/pkg/protos/monitor/monitor.proto",
}

// InventoryClient is the client API for Inventory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InventoryClient interface {
	SetConfig(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	SetTargets(ctx context.Context, in *Desired, opts ...grpc.CallOption) (*Actual, error)
}

type inventoryClient struct {
	cc *grpc.ClientConn
}

func NewInventoryClient(cc *grpc.ClientConn) InventoryClient {
	return &inventoryClient{cc}
}

func (c *inventoryClient) SetConfig(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/monitor.Inventory/SetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) SetTargets(ctx context.Context, in *Desired, opts ...grpc.CallOption) (*Actual, error) {
	out := new(Actual)
	err := c.cc.Invoke(ctx, "/monitor.Inventory/SetTargets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryServer is the server API for Inventory service.
type InventoryServer interface {
	SetConfig(context.Context, *empty.Empty) (*empty.Empty, error)
	SetTargets(context.Context, *Desired) (*Actual, error)
}

// UnimplementedInventoryServer can be embedded to have forward compatible implementations.
type UnimplementedInventoryServer struct {
}

func (*UnimplementedInventoryServer) SetConfig(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfig not implemented")
}
func (*UnimplementedInventoryServer) SetTargets(ctx context.Context, req *Desired) (*Actual, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTargets not implemented")
}

func RegisterInventoryServer(s *grpc.Server, srv InventoryServer) {
	s.RegisterService(&_Inventory_serviceDesc, srv)
}

func _Inventory_SetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).SetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitor.Inventory/SetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).SetConfig(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_SetTargets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Desired)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).SetTargets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitor.Inventory/SetTargets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).SetTargets(ctx, req.(*Desired))
	}
	return interceptor(ctx, in, info, handler)
}

var _Inventory_serviceDesc = grpc.ServiceDesc{
	ServiceName: "monitor.Inventory",
	HandlerType: (*InventoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetConfig",
			Handler:    _Inventory_SetConfig_Handler,
		},
		{
			MethodName: "SetTargets",
			Handler:    _Inventory_SetTargets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/Jim3Things/CloudChamber/pkg/protos/monitor/monitor.proto",
}
