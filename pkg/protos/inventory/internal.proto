// This file contains the internal definitions used by the stor to provide the
// internal, universal representation of the various items in the inventory. All
// other forms can be converted into the internal format and likewise, all the
// other forms can be generated from the internal format.

syntax = "proto3";

package inventory;

import "github.com/Jim3Things/CloudChamber/pkg/protos/inventory/common.proto";
import "github.com/Jim3Things/CloudChamber/pkg/protos/inventory/actual.proto";
import "github.com/Jim3Things/CloudChamber/pkg/protos/inventory/definition.proto";
import "github.com/Jim3Things/CloudChamber/pkg/protos/inventory/target.proto";

option go_package = "github.com/Jim3Things/CloudChamber/pkg/protos/inventory";

message internal {

    message pdu {
        definition.pdu definition = 1;
        target.pdu target = 2;
        actual.pdu actual = 3;
    }

    message tor {
        definition.tor definition = 1;
        target.tor target = 2;
        actual.tor actual = 3;
    }

    message blade {
        definition.blade definition = 1;
        target.blade target = 2;
        actual.blade actual = 3;
    }

    message rack {
        rack_details details = 1;

        // Specify the pdus in the rack.  Each pdu is defined by an integer index within
        // that rack, which is used here as the key.
        //
        map<int64, definition.pdu> pdus = 10;
    
        // specify the tors in the rack.  Each tor is defined by an integer index within
        // that rack, which is used here as the key.
        //
        map<int64, definition.tor> tors = 11;
    
        // specify the blades in the rack.  Each blade is defined by an integer index within
        // that rack, which is used here as the key.
        //
        map<int64, definition.blade> blades = 12;
    }

    // A complete description of a zone internal "in-memory" usage as oppoesed to reading
    // and/or writing individual zone records from the store, i.e. a "container" structure.
    //
    message zone {
        zone_details details = 1;

        // The set of racks forming an individual zone. All racks in the zone are affected
        // by the properties of the zone or any conditions affecting the zone. Each rack is
        // defined by a string name within the zone, and that name is used here as a key.
        //
        map<string, definition.rack> racks = 10;
    }

    // A complete description of a region internal "in-memory" usage as opposed to reading
    // and/or writing individual region records from the store, i.e. a "container" structure.
    //
    message region {
        region_details details = 1;

        map<string, definition.zone> zones = 10;
    }

    // Current tgt and act are experimental to see what they look like and how they might
    // operate. Expect changes in this area.
    //
    message record_target {
        map<int64, target.pdu>   pdus   = 10;
        map<int64, target.tor>   tors   = 11;
        map<int64, target.blade> blades = 12;
    }

    message record_actual {
        map<int64, actual.pdu>   pdus   = 10;
        map<int64, actual.tor>   tors   = 11;
        map<int64, actual.blade> blades = 12;
    }

    message record_observed {
        map<int64, actual.pdu>   pdus   = 10;
        map<int64, actual.tor>   tors   = 11;
        map<int64, actual.blade> blades = 12;
    }
}
