// Defines the data structures used to describe the capacity of an inventory
// item. Capacity is a multi-dimensional aspect of any inventory item, since
// each item has multiple internal resources, any one or combination of which
// can be exhausted.
//
// The multi-dimensionality is important for schedulers to understand, as the
// exhaustion of one dimension can lead to a case where the other unused
// capacity dimensions are stranded.  For instance, if all cores are consumed
// then no free memory, disk, or other dimensions of a blade can be used.
syntax = "proto3";

package inventory;

option go_package = "github.com/Jim3Things/CloudChamber/simulation/pkg/protos/inventory";
option csharp_namespace = "CloudChamber.Protos.Inventory";

// Describe the capabilities of a physical blade
// TODO: Do we need anything about host system software, or is this purely physical attributes?

// Define the set of known accelerators, such as GPUs or FPGAs.
message Accelerator {
    message NVIDIA_V100 {}

    oneof accelerator_type {
        NVIDIA_V100 v100 = 1;
    }
}

// Defines the capacity dimensions and values for a blade
message BladeCapacity {
    // The number of cores on the blade.
    int64 cores = 1;

    // The amount of memory, in megabytes
    int64 memory_in_mb = 2;

    // The amount of local disk space, in gigabytes.  Note that this assumes either one disk,
    // or that the disks are mounted collectively as a single volume
    int64 disk_in_gb = 3;

    // The network bandwidth from the host in megabits per second
    int64 network_bandwidth_in_mbps = 4;

    // The processor architecture
    string arch = 5;

    // Supply the set of accelerators for this blade, including none.
    repeated Accelerator accelerators = 6;
}

message InstanceRequirements {
    // The number of (potentially fractional) cores used by the instance.
    float cores = 1;

    // The amount of memory, in megabytes
    int64 memory_in_mb = 2;

    // The network bandwidth required in megabits per second
    int64 network_bandwidth_in_mbps = 4;

    // The processor architecture
    string arch = 5;

    // Supply the set of accelerators required by this instance, including none.
    repeated Accelerator accelerators = 6;
}
