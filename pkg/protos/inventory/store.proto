// This file contains the definitions used by the inventory package to represent the
// container classes which are used to .

syntax = "proto3";

package inventory;

import "github.com/Jim3Things/CloudChamber/pkg/protos/inventory/capacity.proto";
import "github.com/Jim3Things/CloudChamber/pkg/protos/inventory/common.proto";
import "github.com/Jim3Things/CloudChamber/pkg/protos/inventory/target.proto";
import "github.com/Jim3Things/CloudChamber/pkg/protos/inventory/actual.proto";

option go_package = "github.com/Jim3Things/CloudChamber/simulation/pkg/protos/inventory";
option csharp_namespace = "CloudChamber.Protos.Inventory";


// A complete description of a rack internal "in-memory" usage as opposed to reading
// and/or writing individual rack records from the store, i.e. a "container" structure.
//
message Store {

    message RecordDefinition {

        message Pdu {
            PduDetails            details = 1;
            map<int64, PowerPort> ports   = 10;
        }

        message Tor {
            TorDetails              details = 1;
            map<int64, NetworkPort> ports   = 10;
        }

        message Blade {
            BladeDetails  details          =  1;
            BladeCapacity capacity         = 10;
            bool          boot_on_power_on = 11;
            BladeBootInfo boot_info        = 12;
        }

        message Rack {
            RackDetails details = 1;
        }

        message Zone {
            ZoneDetails details = 1;
        }

        message Region {
            RegionDetails details = 1;
        }
    }

    // Current tgt and act are experimental to see what they look like and how they might
    // operate. Expect changes in this area.
    //
    message RecordTarget {

        message Pdu {
            Target.Pdu target = 1;
        }

        message Tor {
            Target.Tor target = 1;
        }

        message Blade {
            Target.Blade target = 1;
        }

        message rack {
            Target.Tor target = 1;
        }

        message Zone {
            Target.Tor target = 1;
        }

        message Region {
            Target.Tor target = 1;
        }
    }

    message RecordActual {
        map<int64, Actual.Pdu>   pdus   = 10;
        map<int64, Actual.Tor>   tors   = 11;
        map<int64, Actual.Blade> blades = 12;
    }

    message record_observed {
        map<int64, Actual.Pdu>   pdus   = 10;
        map<int64, Actual.Tor>   tors   = 11;
        map<int64, Actual.Blade> blades = 12;
    }
}

