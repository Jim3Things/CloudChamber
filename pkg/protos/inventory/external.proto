// This file contains the definitions used by configuration and external commands for describing the simulated
// inventory.  These definitions describe the items, but do not define any status for them.
//
// Note that we may, at some point, want to add an initial status definition in order to define inventory that begins
// in a partially failed manner.

syntax = "proto3";

package inventory;

import "github.com/Jim3Things/CloudChamber/pkg/protos/inventory/capacity.proto";
import "github.com/Jim3Things/CloudChamber/pkg/protos/inventory/common.proto";

option go_package = "github.com/Jim3Things/CloudChamber/simulation/pkg/protos/inventory";
option csharp_namespace = "CloudChamber.Protos.Inventory";

message External {

    // The two types here are common overhead items in a rack.  All are pure skeletons at this point.
    // Note that all have implied connectivity with all other items in a rack.  Currently elided in
    // the external model, but used in the other models.

    // Power distribution unit.  Network accessible power controller
    message Pdu {
        // Note that full internal name for a pdu is <rackname>-pdu-0
    }

    // Rack-level network switch.
    message Tor {
        // Note that full internal name for a tor is <rackname>-tor-0
    }

    message Rack {
        RackDetails details = 1;

        // This assumes a single overhead item per rack.  May want to allow multiple to handle
        // subdivisions for power or network, say.

        Pdu pdu = 2;
        Tor tor = 3;

        // specify the blades in the rack.  Each blade is defined by an integer index within that
        // rack, which is used here as the key.
        map<int64, BladeCapacity> blades = 4;
    }

    // Finally, a zone is a collection of racks.  Each rack has a name, which is used as a key in
    // the map below.
    message Zone {
        map<string, Rack> racks = 1;
    }

    // The following messages are used to format JSON strings for use by
    // external callers.  These contain memoized calculations that are likely
    // to be needed by the common callers.

    // Rack list entry item
    message RackSummary {
        // host relative URI that can be used to retrieve its details
        string uri = 1;
    }

    // Summary of the full inventory
    message ZoneSummary {
        // Summary information about all known racks
        map<string, RackSummary> racks = 1;

        // The largest number of blades held in any rack
        int64 max_blade_count = 2;

        // The largest capacity values found in any blade
        BladeCapacity max_capacity = 3;

        // Overview detail 
        ZoneDetails details = 4;

        // Friendly name for the zone
        string name = 5;
    }
}
