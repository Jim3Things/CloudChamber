// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/Jim3Things/CloudChamber/pkg/protos/common/capacity.proto

package common

import (
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Define the set of known accelerators, such as GPUs or FPGAs.
type Accelerator struct {
	// Types that are valid to be assigned to AcceleratorType:
	//	*Accelerator_V100
	AcceleratorType      isAccelerator_AcceleratorType `protobuf_oneof:"accelerator_type"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *Accelerator) Reset()         { *m = Accelerator{} }
func (m *Accelerator) String() string { return proto.CompactTextString(m) }
func (*Accelerator) ProtoMessage()    {}
func (*Accelerator) Descriptor() ([]byte, []int) {
	return fileDescriptor_426fce80509e2de4, []int{0}
}

func (m *Accelerator) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Accelerator.Unmarshal(m, b)
}
func (m *Accelerator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Accelerator.Marshal(b, m, deterministic)
}
func (m *Accelerator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Accelerator.Merge(m, src)
}
func (m *Accelerator) XXX_Size() int {
	return xxx_messageInfo_Accelerator.Size(m)
}
func (m *Accelerator) XXX_DiscardUnknown() {
	xxx_messageInfo_Accelerator.DiscardUnknown(m)
}

var xxx_messageInfo_Accelerator proto.InternalMessageInfo

type isAccelerator_AcceleratorType interface {
	isAccelerator_AcceleratorType()
}

type Accelerator_V100 struct {
	V100 *Accelerator_NVIDIA_V100 `protobuf:"bytes,1,opt,name=v100,proto3,oneof"`
}

func (*Accelerator_V100) isAccelerator_AcceleratorType() {}

func (m *Accelerator) GetAcceleratorType() isAccelerator_AcceleratorType {
	if m != nil {
		return m.AcceleratorType
	}
	return nil
}

func (m *Accelerator) GetV100() *Accelerator_NVIDIA_V100 {
	if x, ok := m.GetAcceleratorType().(*Accelerator_V100); ok {
		return x.V100
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Accelerator) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Accelerator_V100)(nil),
	}
}

type Accelerator_NVIDIA_V100 struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Accelerator_NVIDIA_V100) Reset()         { *m = Accelerator_NVIDIA_V100{} }
func (m *Accelerator_NVIDIA_V100) String() string { return proto.CompactTextString(m) }
func (*Accelerator_NVIDIA_V100) ProtoMessage()    {}
func (*Accelerator_NVIDIA_V100) Descriptor() ([]byte, []int) {
	return fileDescriptor_426fce80509e2de4, []int{0, 0}
}

func (m *Accelerator_NVIDIA_V100) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Accelerator_NVIDIA_V100.Unmarshal(m, b)
}
func (m *Accelerator_NVIDIA_V100) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Accelerator_NVIDIA_V100.Marshal(b, m, deterministic)
}
func (m *Accelerator_NVIDIA_V100) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Accelerator_NVIDIA_V100.Merge(m, src)
}
func (m *Accelerator_NVIDIA_V100) XXX_Size() int {
	return xxx_messageInfo_Accelerator_NVIDIA_V100.Size(m)
}
func (m *Accelerator_NVIDIA_V100) XXX_DiscardUnknown() {
	xxx_messageInfo_Accelerator_NVIDIA_V100.DiscardUnknown(m)
}

var xxx_messageInfo_Accelerator_NVIDIA_V100 proto.InternalMessageInfo

// Defines the capacity dimensions and values for a blade
type BladeCapacity struct {
	// The number of cores on the blade.
	Cores int64 `protobuf:"varint,1,opt,name=cores,proto3" json:"cores,omitempty"`
	// The amount of memory, in megabytes
	MemoryInMb int64 `protobuf:"varint,2,opt,name=memory_in_mb,json=memoryInMb,proto3" json:"memory_in_mb,omitempty"`
	// The amount of local disk space, in gigabytes.  Note that this assumes either one disk, or that the disks are
	// mounted collectively as a single volume
	DiskInGb int64 `protobuf:"varint,3,opt,name=disk_in_gb,json=diskInGb,proto3" json:"disk_in_gb,omitempty"`
	// The network bandwidth from the host in megabits per second
	NetworkBandwidthInMbps int64 `protobuf:"varint,4,opt,name=network_bandwidth_in_mbps,json=networkBandwidthInMbps,proto3" json:"network_bandwidth_in_mbps,omitempty"`
	// The processor architecture
	Arch string `protobuf:"bytes,5,opt,name=arch,proto3" json:"arch,omitempty"`
	// Supply the set of accelerators for this blade, including none.
	Accelerators         []*Accelerator `protobuf:"bytes,6,rep,name=accelerators,proto3" json:"accelerators,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *BladeCapacity) Reset()         { *m = BladeCapacity{} }
func (m *BladeCapacity) String() string { return proto.CompactTextString(m) }
func (*BladeCapacity) ProtoMessage()    {}
func (*BladeCapacity) Descriptor() ([]byte, []int) {
	return fileDescriptor_426fce80509e2de4, []int{1}
}

func (m *BladeCapacity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BladeCapacity.Unmarshal(m, b)
}
func (m *BladeCapacity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BladeCapacity.Marshal(b, m, deterministic)
}
func (m *BladeCapacity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BladeCapacity.Merge(m, src)
}
func (m *BladeCapacity) XXX_Size() int {
	return xxx_messageInfo_BladeCapacity.Size(m)
}
func (m *BladeCapacity) XXX_DiscardUnknown() {
	xxx_messageInfo_BladeCapacity.DiscardUnknown(m)
}

var xxx_messageInfo_BladeCapacity proto.InternalMessageInfo

func (m *BladeCapacity) GetCores() int64 {
	if m != nil {
		return m.Cores
	}
	return 0
}

func (m *BladeCapacity) GetMemoryInMb() int64 {
	if m != nil {
		return m.MemoryInMb
	}
	return 0
}

func (m *BladeCapacity) GetDiskInGb() int64 {
	if m != nil {
		return m.DiskInGb
	}
	return 0
}

func (m *BladeCapacity) GetNetworkBandwidthInMbps() int64 {
	if m != nil {
		return m.NetworkBandwidthInMbps
	}
	return 0
}

func (m *BladeCapacity) GetArch() string {
	if m != nil {
		return m.Arch
	}
	return ""
}

func (m *BladeCapacity) GetAccelerators() []*Accelerator {
	if m != nil {
		return m.Accelerators
	}
	return nil
}

type InstanceRequirements struct {
	// The number of (potentially fractional) cores used by the instance.
	Cores float32 `protobuf:"fixed32,1,opt,name=cores,proto3" json:"cores,omitempty"`
	// The amount of memory, in megabytes
	MemoryInMb int64 `protobuf:"varint,2,opt,name=memory_in_mb,json=memoryInMb,proto3" json:"memory_in_mb,omitempty"`
	// The network bandwidth required in megabits per second
	NetworkBandwidthInMbps int64 `protobuf:"varint,4,opt,name=network_bandwidth_in_mbps,json=networkBandwidthInMbps,proto3" json:"network_bandwidth_in_mbps,omitempty"`
	// The processor architecture
	Arch string `protobuf:"bytes,5,opt,name=arch,proto3" json:"arch,omitempty"`
	// Supply the set of accelerators required by this instance, including none.
	Accelerators         []*Accelerator `protobuf:"bytes,6,rep,name=accelerators,proto3" json:"accelerators,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *InstanceRequirements) Reset()         { *m = InstanceRequirements{} }
func (m *InstanceRequirements) String() string { return proto.CompactTextString(m) }
func (*InstanceRequirements) ProtoMessage()    {}
func (*InstanceRequirements) Descriptor() ([]byte, []int) {
	return fileDescriptor_426fce80509e2de4, []int{2}
}

func (m *InstanceRequirements) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstanceRequirements.Unmarshal(m, b)
}
func (m *InstanceRequirements) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstanceRequirements.Marshal(b, m, deterministic)
}
func (m *InstanceRequirements) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceRequirements.Merge(m, src)
}
func (m *InstanceRequirements) XXX_Size() int {
	return xxx_messageInfo_InstanceRequirements.Size(m)
}
func (m *InstanceRequirements) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceRequirements.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceRequirements proto.InternalMessageInfo

func (m *InstanceRequirements) GetCores() float32 {
	if m != nil {
		return m.Cores
	}
	return 0
}

func (m *InstanceRequirements) GetMemoryInMb() int64 {
	if m != nil {
		return m.MemoryInMb
	}
	return 0
}

func (m *InstanceRequirements) GetNetworkBandwidthInMbps() int64 {
	if m != nil {
		return m.NetworkBandwidthInMbps
	}
	return 0
}

func (m *InstanceRequirements) GetArch() string {
	if m != nil {
		return m.Arch
	}
	return ""
}

func (m *InstanceRequirements) GetAccelerators() []*Accelerator {
	if m != nil {
		return m.Accelerators
	}
	return nil
}

func init() {
	proto.RegisterType((*Accelerator)(nil), "common.accelerator")
	proto.RegisterType((*Accelerator_NVIDIA_V100)(nil), "common.accelerator.NVIDIA_V100")
	proto.RegisterType((*BladeCapacity)(nil), "common.blade_capacity")
	proto.RegisterType((*InstanceRequirements)(nil), "common.instance_requirements")
}

func init() {
	proto.RegisterFile("github.com/Jim3Things/CloudChamber/pkg/protos/common/capacity.proto", fileDescriptor_426fce80509e2de4)
}

var fileDescriptor_426fce80509e2de4 = []byte{
	// 414 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x93, 0x4f, 0x6b, 0xd4, 0x40,
	0x18, 0xc6, 0x93, 0xec, 0x9f, 0xea, 0xbb, 0x55, 0xca, 0x88, 0x1a, 0x2b, 0x62, 0x58, 0x28, 0xac,
	0x87, 0x26, 0xdb, 0xd6, 0x3f, 0xe7, 0xce, 0x0a, 0xba, 0x82, 0x1e, 0x16, 0xe9, 0xc1, 0x4b, 0x98,
	0x99, 0x0c, 0xc9, 0xb0, 0x99, 0x99, 0x38, 0x33, 0xbb, 0x35, 0x9f, 0xc5, 0x2f, 0x2a, 0x3d, 0x88,
	0x6c, 0x62, 0x21, 0x41, 0x4f, 0x7b, 0xea, 0x2d, 0x79, 0xde, 0xdf, 0xfb, 0x3c, 0xbc, 0x0f, 0x0c,
	0x2c, 0x72, 0xe1, 0x8a, 0x0d, 0x8d, 0x99, 0x96, 0xc9, 0x27, 0x21, 0x2f, 0xbe, 0x16, 0x42, 0xe5,
	0x36, 0x59, 0x94, 0x7a, 0x93, 0x2d, 0x0a, 0x22, 0x29, 0x37, 0x49, 0xb5, 0xce, 0x93, 0xca, 0x68,
	0xa7, 0x6d, 0xc2, 0xb4, 0x94, 0x5a, 0x25, 0x8c, 0x54, 0x84, 0x09, 0x57, 0xc7, 0x8d, 0x8c, 0xc6,
	0xad, 0x7c, 0x7c, 0xd9, 0x31, 0xe3, 0x6a, 0xab, 0xeb, 0xca, 0xe8, 0x1f, 0x75, 0xbb, 0xcb, 0x4e,
	0x73, 0xae, 0x4e, 0xb7, 0xa4, 0x14, 0x19, 0x71, 0x3c, 0xf9, 0xe7, 0xa3, 0xb5, 0x9a, 0x96, 0x30,
	0x21, 0x8c, 0xf1, 0x92, 0x1b, 0xe2, 0xb4, 0x41, 0x6f, 0x60, 0xb8, 0x3d, 0x9b, 0xcf, 0x43, 0x3f,
	0xf2, 0x67, 0x93, 0xf3, 0x97, 0x71, 0x1b, 0x14, 0x77, 0x90, 0xf8, 0xcb, 0xd5, 0xf2, 0xfd, 0xf2,
	0x32, 0xbd, 0x3a, 0x9b, 0xcf, 0x3f, 0x7a, 0xab, 0x06, 0x3f, 0x7e, 0x00, 0x93, 0x8e, 0x8c, 0x9f,
	0xc2, 0x51, 0x67, 0x23, 0x75, 0x75, 0xc5, 0xd1, 0xe0, 0x17, 0xf6, 0xa7, 0x3f, 0x03, 0x78, 0x48,
	0x4b, 0x92, 0xf1, 0xf4, 0xf6, 0x22, 0xf4, 0x02, 0x46, 0x4c, 0x1b, 0x6e, 0x9b, 0xc8, 0x01, 0x3e,
	0xb8, 0xc1, 0xc3, 0x69, 0x10, 0x79, 0xab, 0x56, 0x45, 0xaf, 0xe0, 0x50, 0x72, 0xa9, 0x4d, 0x9d,
	0x0a, 0x95, 0x4a, 0x1a, 0x06, 0x7d, 0x0a, 0xda, 0xe1, 0x52, 0x7d, 0xa6, 0xe8, 0x04, 0x20, 0x13,
	0x76, 0xbd, 0x03, 0x73, 0x1a, 0x0e, 0xfa, 0xe0, 0xbd, 0xdd, 0x68, 0xa9, 0x3e, 0x50, 0x84, 0xe1,
	0x99, 0xe2, 0xee, 0x5a, 0x9b, 0x75, 0x4a, 0x89, 0xca, 0xae, 0x45, 0xe6, 0x8a, 0xd6, 0xbc, 0xb2,
	0xe1, 0xb0, 0xbf, 0xf5, 0xe4, 0x2f, 0x89, 0x6f, 0xc1, 0x5d, 0x50, 0x65, 0xd1, 0x73, 0x18, 0x12,
	0xc3, 0x8a, 0x70, 0x14, 0xf9, 0xb3, 0xfb, 0x0d, 0x6e, 0x82, 0x23, 0x7f, 0xd5, 0x88, 0xe8, 0x1d,
	0x1c, 0x76, 0xae, 0xb7, 0xe1, 0x38, 0x1a, 0xcc, 0x26, 0xe7, 0x8f, 0xfe, 0xd3, 0xe5, 0xaa, 0x07,
	0x4e, 0x7f, 0xfb, 0xf0, 0x58, 0x28, 0xeb, 0x88, 0x62, 0x3c, 0x35, 0xfc, 0xfb, 0x46, 0x18, 0x2e,
	0xb9, 0x72, 0x16, 0x45, 0xdd, 0x92, 0x02, 0x0c, 0x37, 0xf8, 0x00, 0x46, 0x27, 0x9e, 0xe7, 0xed,
	0xd3, 0xd3, 0x9d, 0x2d, 0x00, 0xbf, 0xfd, 0xf6, 0x7a, 0x9f, 0xe7, 0x41, 0xc7, 0xcd, 0xef, 0xc5,
	0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd1, 0x0b, 0x69, 0x9a, 0x5d, 0x03, 0x00, 0x00,
}
