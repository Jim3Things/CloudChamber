// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/Jim3Things/CloudChamber/pkg/protos/common/capacity.proto

package common

import (
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Defines the capacity dimensions and values for a blade
type BladeCapacity struct {
	// The number of cores on the blade.  This is defined as a float to allow easier comparison to workload
	// requirements that specify partial cores (e.g. through time sliced sharing)
	Cores float32 `protobuf:"fixed32,1,opt,name=cores,proto3" json:"cores,omitempty"`
	// The amount of memory, in megabytes
	MemoryInMb int64 `protobuf:"varint,2,opt,name=memory_in_mb,json=memoryInMb,proto3" json:"memory_in_mb,omitempty"`
	// The amount of local disk space, in gigabytes.  Note that this assumes either one disk, or that the disks are
	// mounted collectively as a single volume
	DiskInGb int64 `protobuf:"varint,3,opt,name=disk_in_gb,json=diskInGb,proto3" json:"disk_in_gb,omitempty"`
	// The network bandwidth from the host in megabytes per second
	NetworkBandwidth int64 `protobuf:"varint,4,opt,name=network_bandwidth,json=networkBandwidth,proto3" json:"network_bandwidth,omitempty"`
	// The processor architecture
	Arch string `protobuf:"bytes,5,opt,name=arch,proto3" json:"arch,omitempty"`
	// Supply the set of accelerators for this blade, including none.
	Accelerators         []*BladeCapacityAccelerator `protobuf:"bytes,6,rep,name=accelerators,proto3" json:"accelerators,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *BladeCapacity) Reset()         { *m = BladeCapacity{} }
func (m *BladeCapacity) String() string { return proto.CompactTextString(m) }
func (*BladeCapacity) ProtoMessage()    {}
func (*BladeCapacity) Descriptor() ([]byte, []int) {
	return fileDescriptor_426fce80509e2de4, []int{0}
}

func (m *BladeCapacity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BladeCapacity.Unmarshal(m, b)
}
func (m *BladeCapacity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BladeCapacity.Marshal(b, m, deterministic)
}
func (m *BladeCapacity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BladeCapacity.Merge(m, src)
}
func (m *BladeCapacity) XXX_Size() int {
	return xxx_messageInfo_BladeCapacity.Size(m)
}
func (m *BladeCapacity) XXX_DiscardUnknown() {
	xxx_messageInfo_BladeCapacity.DiscardUnknown(m)
}

var xxx_messageInfo_BladeCapacity proto.InternalMessageInfo

func (m *BladeCapacity) GetCores() float32 {
	if m != nil {
		return m.Cores
	}
	return 0
}

func (m *BladeCapacity) GetMemoryInMb() int64 {
	if m != nil {
		return m.MemoryInMb
	}
	return 0
}

func (m *BladeCapacity) GetDiskInGb() int64 {
	if m != nil {
		return m.DiskInGb
	}
	return 0
}

func (m *BladeCapacity) GetNetworkBandwidth() int64 {
	if m != nil {
		return m.NetworkBandwidth
	}
	return 0
}

func (m *BladeCapacity) GetArch() string {
	if m != nil {
		return m.Arch
	}
	return ""
}

func (m *BladeCapacity) GetAccelerators() []*BladeCapacityAccelerator {
	if m != nil {
		return m.Accelerators
	}
	return nil
}

// Define the set of known accelerators, such as GPUs or FPGAs.
type BladeCapacityAccelerator struct {
	// Types that are valid to be assigned to AcceleratorType:
	//	*BladeCapacityAccelerator_V100
	AcceleratorType      isBladeCapacityAccelerator_AcceleratorType `protobuf_oneof:"accelerator_type"`
	XXX_NoUnkeyedLiteral struct{}                                   `json:"-"`
	XXX_unrecognized     []byte                                     `json:"-"`
	XXX_sizecache        int32                                      `json:"-"`
}

func (m *BladeCapacityAccelerator) Reset()         { *m = BladeCapacityAccelerator{} }
func (m *BladeCapacityAccelerator) String() string { return proto.CompactTextString(m) }
func (*BladeCapacityAccelerator) ProtoMessage()    {}
func (*BladeCapacityAccelerator) Descriptor() ([]byte, []int) {
	return fileDescriptor_426fce80509e2de4, []int{0, 0}
}

func (m *BladeCapacityAccelerator) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BladeCapacityAccelerator.Unmarshal(m, b)
}
func (m *BladeCapacityAccelerator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BladeCapacityAccelerator.Marshal(b, m, deterministic)
}
func (m *BladeCapacityAccelerator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BladeCapacityAccelerator.Merge(m, src)
}
func (m *BladeCapacityAccelerator) XXX_Size() int {
	return xxx_messageInfo_BladeCapacityAccelerator.Size(m)
}
func (m *BladeCapacityAccelerator) XXX_DiscardUnknown() {
	xxx_messageInfo_BladeCapacityAccelerator.DiscardUnknown(m)
}

var xxx_messageInfo_BladeCapacityAccelerator proto.InternalMessageInfo

type isBladeCapacityAccelerator_AcceleratorType interface {
	isBladeCapacityAccelerator_AcceleratorType()
}

type BladeCapacityAccelerator_V100 struct {
	V100 *BladeCapacityAccelerator_NVIDIA_V100 `protobuf:"bytes,1,opt,name=v100,proto3,oneof"`
}

func (*BladeCapacityAccelerator_V100) isBladeCapacityAccelerator_AcceleratorType() {}

func (m *BladeCapacityAccelerator) GetAcceleratorType() isBladeCapacityAccelerator_AcceleratorType {
	if m != nil {
		return m.AcceleratorType
	}
	return nil
}

func (m *BladeCapacityAccelerator) GetV100() *BladeCapacityAccelerator_NVIDIA_V100 {
	if x, ok := m.GetAcceleratorType().(*BladeCapacityAccelerator_V100); ok {
		return x.V100
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*BladeCapacityAccelerator) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*BladeCapacityAccelerator_V100)(nil),
	}
}

type BladeCapacityAccelerator_NVIDIA_V100 struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BladeCapacityAccelerator_NVIDIA_V100) Reset()         { *m = BladeCapacityAccelerator_NVIDIA_V100{} }
func (m *BladeCapacityAccelerator_NVIDIA_V100) String() string { return proto.CompactTextString(m) }
func (*BladeCapacityAccelerator_NVIDIA_V100) ProtoMessage()    {}
func (*BladeCapacityAccelerator_NVIDIA_V100) Descriptor() ([]byte, []int) {
	return fileDescriptor_426fce80509e2de4, []int{0, 0, 0}
}

func (m *BladeCapacityAccelerator_NVIDIA_V100) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BladeCapacityAccelerator_NVIDIA_V100.Unmarshal(m, b)
}
func (m *BladeCapacityAccelerator_NVIDIA_V100) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BladeCapacityAccelerator_NVIDIA_V100.Marshal(b, m, deterministic)
}
func (m *BladeCapacityAccelerator_NVIDIA_V100) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BladeCapacityAccelerator_NVIDIA_V100.Merge(m, src)
}
func (m *BladeCapacityAccelerator_NVIDIA_V100) XXX_Size() int {
	return xxx_messageInfo_BladeCapacityAccelerator_NVIDIA_V100.Size(m)
}
func (m *BladeCapacityAccelerator_NVIDIA_V100) XXX_DiscardUnknown() {
	xxx_messageInfo_BladeCapacityAccelerator_NVIDIA_V100.DiscardUnknown(m)
}

var xxx_messageInfo_BladeCapacityAccelerator_NVIDIA_V100 proto.InternalMessageInfo

func init() {
	proto.RegisterType((*BladeCapacity)(nil), "common.blade_capacity")
	proto.RegisterType((*BladeCapacityAccelerator)(nil), "common.blade_capacity.accelerator")
	proto.RegisterType((*BladeCapacityAccelerator_NVIDIA_V100)(nil), "common.blade_capacity.accelerator.NVIDIA_V100")
}

func init() {
	proto.RegisterFile("github.com/Jim3Things/CloudChamber/pkg/protos/common/capacity.proto", fileDescriptor_426fce80509e2de4)
}

var fileDescriptor_426fce80509e2de4 = []byte{
	// 380 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0x4f, 0x8b, 0xd4, 0x30,
	0x18, 0xc6, 0xdb, 0xe9, 0xcc, 0xac, 0xbe, 0xb3, 0xca, 0x98, 0x8b, 0x65, 0xbc, 0x94, 0x81, 0x85,
	0x7a, 0xd8, 0xb6, 0xfb, 0x07, 0xef, 0x9b, 0x59, 0xd4, 0x0a, 0x7a, 0x28, 0xb2, 0x07, 0x2f, 0x25,
	0x49, 0x43, 0x1b, 0xa6, 0x49, 0x4a, 0x9a, 0x9d, 0xb5, 0xf8, 0x55, 0xfc, 0xa0, 0xb2, 0x27, 0xd9,
	0xd6, 0x81, 0x16, 0x0f, 0x82, 0xb7, 0xbc, 0xcf, 0xf3, 0x7b, 0x9e, 0x90, 0x97, 0xc0, 0xae, 0x14,
	0xb6, 0xba, 0xa7, 0x11, 0xd3, 0x32, 0xfe, 0x24, 0xe4, 0xd5, 0xd7, 0x4a, 0xa8, 0xb2, 0x8d, 0x77,
	0xb5, 0xbe, 0x2f, 0x76, 0x15, 0x91, 0x94, 0x9b, 0xb8, 0xd9, 0x97, 0x71, 0x63, 0xb4, 0xd5, 0x6d,
	0xcc, 0xb4, 0x94, 0x5a, 0xc5, 0x8c, 0x34, 0x84, 0x09, 0xdb, 0x45, 0xbd, 0x8c, 0x96, 0x83, 0xbc,
	0xb9, 0x19, 0x95, 0x71, 0x75, 0xd0, 0x5d, 0x63, 0xf4, 0xf7, 0x6e, 0xc8, 0xb2, 0xf3, 0x92, 0xab,
	0xf3, 0x03, 0xa9, 0x45, 0x41, 0x2c, 0x8f, 0xff, 0x3a, 0x0c, 0x55, 0xdb, 0x9f, 0x1e, 0xbc, 0xa4,
	0x35, 0x29, 0x78, 0x7e, 0xbc, 0x03, 0x05, 0xb0, 0x60, 0xda, 0xf0, 0xd6, 0x77, 0x03, 0x37, 0x9c,
	0x61, 0x78, 0xc4, 0x27, 0xb0, 0x38, 0x73, 0x1c, 0xc7, 0xc9, 0x06, 0x03, 0xbd, 0x85, 0x53, 0xc9,
	0xa5, 0x36, 0x5d, 0x2e, 0x54, 0x2e, 0xa9, 0x3f, 0x0b, 0xdc, 0xd0, 0xc3, 0x27, 0x8f, 0x78, 0xbe,
	0x9d, 0x05, 0x4e, 0x06, 0x83, 0x99, 0xaa, 0xcf, 0x14, 0x9d, 0x01, 0x14, 0xa2, 0xdd, 0x3f, 0x81,
	0x25, 0xf5, 0xbd, 0x29, 0xf8, 0xec, 0xc9, 0x4a, 0xd5, 0x07, 0x8a, 0xae, 0xe1, 0x95, 0xe2, 0xf6,
	0x41, 0x9b, 0x7d, 0x4e, 0x89, 0x2a, 0x1e, 0x44, 0x61, 0x2b, 0x7f, 0x3e, 0xa5, 0xd7, 0x7f, 0x08,
	0x7c, 0x04, 0xd0, 0x1b, 0x98, 0x13, 0xc3, 0x2a, 0x7f, 0x11, 0xb8, 0xe1, 0xf3, 0x1e, 0x34, 0xb3,
	0xb5, 0x9b, 0xf5, 0x22, 0x7a, 0x0f, 0xa7, 0x84, 0x31, 0x5e, 0x73, 0x43, 0xac, 0x36, 0xad, 0xbf,
	0x0c, 0xbc, 0x70, 0x75, 0xb9, 0x8d, 0x86, 0xdd, 0x45, 0xd3, 0x47, 0x47, 0x23, 0x34, 0x9b, 0xe4,
	0x36, 0x3f, 0x60, 0x35, 0x9a, 0xd1, 0x2d, 0xcc, 0x0f, 0x17, 0x49, 0xd2, 0x2f, 0x67, 0x75, 0x19,
	0xfd, 0xbb, 0x2e, 0xfa, 0x72, 0x97, 0xde, 0xa6, 0x37, 0xf9, 0xdd, 0x45, 0x92, 0x7c, 0x74, 0xb2,
	0x3e, 0xbd, 0x79, 0x01, 0xab, 0x91, 0x8c, 0x5f, 0xc3, 0x7a, 0x94, 0xc8, 0x6d, 0xd7, 0x70, 0xe4,
	0xfd, 0xc2, 0x2e, 0x7e, 0xf7, 0xed, 0xfa, 0x7f, 0x3e, 0x0c, 0x5d, 0xf6, 0xe3, 0xd5, 0xef, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x1a, 0x9a, 0x8b, 0xa1, 0x6f, 0x02, 0x00, 0x00,
}
