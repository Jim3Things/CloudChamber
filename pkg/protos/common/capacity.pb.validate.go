// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: github.com/Jim3Things/CloudChamber/pkg/protos/common/capacity.proto

package common

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _capacity_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Accelerator with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Accelerator) Validate() error {
	if m == nil {
		return nil
	}

	switch m.AcceleratorType.(type) {

	case *Accelerator_V100:

		if v, ok := interface{}(m.GetV100()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AcceleratorValidationError{
					field:  "V100",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return AcceleratorValidationError{
			field:  "AcceleratorType",
			reason: "value is required",
		}

	}

	return nil
}

// AcceleratorValidationError is the validation error returned by
// Accelerator.Validate if the designated constraints aren't met.
type AcceleratorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcceleratorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcceleratorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcceleratorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcceleratorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcceleratorValidationError) ErrorName() string { return "AcceleratorValidationError" }

// Error satisfies the builtin error interface
func (e AcceleratorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccelerator.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcceleratorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcceleratorValidationError{}

// Validate checks the field values on BladeCapacity with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *BladeCapacity) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetCores() <= 0 {
		return BladeCapacityValidationError{
			field:  "Cores",
			reason: "value must be greater than 0",
		}
	}

	if m.GetMemoryInMb() <= 0 {
		return BladeCapacityValidationError{
			field:  "MemoryInMb",
			reason: "value must be greater than 0",
		}
	}

	if m.GetDiskInGb() <= 0 {
		return BladeCapacityValidationError{
			field:  "DiskInGb",
			reason: "value must be greater than 0",
		}
	}

	if m.GetNetworkBandwidthInMbps() <= 0 {
		return BladeCapacityValidationError{
			field:  "NetworkBandwidthInMbps",
			reason: "value must be greater than 0",
		}
	}

	if utf8.RuneCountInString(m.GetArch()) < 1 {
		return BladeCapacityValidationError{
			field:  "Arch",
			reason: "value length must be at least 1 runes",
		}
	}

	for idx, item := range m.GetAccelerators() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BladeCapacityValidationError{
					field:  fmt.Sprintf("Accelerators[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// BladeCapacityValidationError is the validation error returned by
// BladeCapacity.Validate if the designated constraints aren't met.
type BladeCapacityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BladeCapacityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BladeCapacityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BladeCapacityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BladeCapacityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BladeCapacityValidationError) ErrorName() string { return "BladeCapacityValidationError" }

// Error satisfies the builtin error interface
func (e BladeCapacityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBladeCapacity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BladeCapacityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BladeCapacityValidationError{}

// Validate checks the field values on InstanceRequirements with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *InstanceRequirements) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetCores() <= 0 {
		return InstanceRequirementsValidationError{
			field:  "Cores",
			reason: "value must be greater than 0",
		}
	}

	if m.GetMemoryInMb() <= 0 {
		return InstanceRequirementsValidationError{
			field:  "MemoryInMb",
			reason: "value must be greater than 0",
		}
	}

	if m.GetNetworkBandwidthInMbps() <= 0 {
		return InstanceRequirementsValidationError{
			field:  "NetworkBandwidthInMbps",
			reason: "value must be greater than 0",
		}
	}

	if utf8.RuneCountInString(m.GetArch()) < 1 {
		return InstanceRequirementsValidationError{
			field:  "Arch",
			reason: "value length must be at least 1 runes",
		}
	}

	for idx, item := range m.GetAccelerators() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InstanceRequirementsValidationError{
					field:  fmt.Sprintf("Accelerators[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// InstanceRequirementsValidationError is the validation error returned by
// InstanceRequirements.Validate if the designated constraints aren't met.
type InstanceRequirementsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceRequirementsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceRequirementsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceRequirementsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceRequirementsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceRequirementsValidationError) ErrorName() string {
	return "InstanceRequirementsValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceRequirementsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceRequirements.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceRequirementsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceRequirementsValidationError{}

// Validate checks the field values on Accelerator_NVIDIA_V100 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Accelerator_NVIDIA_V100) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// Accelerator_NVIDIA_V100ValidationError is the validation error returned by
// Accelerator_NVIDIA_V100.Validate if the designated constraints aren't met.
type Accelerator_NVIDIA_V100ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Accelerator_NVIDIA_V100ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Accelerator_NVIDIA_V100ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Accelerator_NVIDIA_V100ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Accelerator_NVIDIA_V100ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Accelerator_NVIDIA_V100ValidationError) ErrorName() string {
	return "Accelerator_NVIDIA_V100ValidationError"
}

// Error satisfies the builtin error interface
func (e Accelerator_NVIDIA_V100ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccelerator_NVIDIA_V100.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Accelerator_NVIDIA_V100ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Accelerator_NVIDIA_V100ValidationError{}
