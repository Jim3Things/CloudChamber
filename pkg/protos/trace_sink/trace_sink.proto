syntax = "proto3";

package trace_sink;

import "github.com/Jim3Things/CloudChamber/pkg/protos/log/entry.proto";

option go_package="github.com/Jim3Things/CloudChamber/pkg/protos/trace_sink";

// This service is a common collection point for trace entries across
// Cloud Chamber.
//
// This provides a single service that the UI can query to show a single
// logical flow of action across the Cloud Chamber services.
service TraceSink {
  // Append the specified entry to the set of traces held by the trace sink
  rpc Append(AppendRequest) returns (AppendResponse);

  // Get the trace entries after the specified trace ID, up to the specified
  // limit.
  rpc GetAfter(GetAfterRequest) returns (GetAfterResponse);

  // Maybe?
  // Get the active policy options in use by the trace sink
  rpc GetPolicy(GetPolicyRequest) returns (GetPolicyResponse);

  // Maybe?
  // Set the trace sink policy options
  rpc SetPolicy(SetPolicyRequest) returns (SetPolicyResponse);
}

// Specify the trace entry to append to the trace sink's store
message AppendRequest {
  // The trace entry
  log.entry entry = 1;
}

message AppendResponse {
}

// Specify what trace entries to receive
message GetAfterRequest {
  // The last id that has been previously seen.  Note that '-1' will cause the
  // earliest traces to be returned
  int64 id = 1;

  // The maximum number of entries to return in in the reply.
  int64 max_entries = 2;

  // True, if the call should wait for new trace entries if there are none
  // that are later than the specified id when the call arrives.  If false,
  // the call returns immediately with no entries.
  bool wait = 3;
}

// Return the traces for the request
message GetAfterResponse {
  // The highest trace id returned.  Use this as the id on the next GetAfter
  // call in order to start returning the traces that immediately follow.
  int64 lastId = 1;

  // True, if some entries were skipped - probably due to removal at the
  // trace sink in order to stay within the retention limit
  bool missed = 2;

  message trace_entry {
    // Sequential id for this trace
    int64 id = 1;

    // Contents of the trace entry
    log.entry entry = 2;
  }

  // Set of trace entries we're returning
  repeated trace_entry entries = 3;
}

message GetPolicyRequest {

}

message GetPolicyResponse {
  // The limit on the number of entries held in the trace sink
  int64 max_entries_held = 1;
}

message SetPolicyRequest {
  // The limit on the number of entries to hold in the trace sink
  int64 max_entries_held = 1;
}

message SetPolicyResponse {

}