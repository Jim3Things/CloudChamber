// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: github.com/Jim3Things/CloudChamber/pkg/protos/workload/external.proto

package workload

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _external_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on External with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *External) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ExternalValidationError is the validation error returned by
// External.Validate if the designated constraints aren't met.
type ExternalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExternalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExternalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExternalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExternalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExternalValidationError) ErrorName() string { return "ExternalValidationError" }

// Error satisfies the builtin error interface
func (e ExternalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExternal.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExternalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExternalValidationError{}

// Validate checks the field values on ExternalVolume with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ExternalVolume) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetSizeInGb() <= 0 {
		return ExternalVolumeValidationError{
			field:  "SizeInGb",
			reason: "value must be greater than 0",
		}
	}

	if _, ok := ExternalVolumeAttr_name[int32(m.GetAttribute())]; !ok {
		return ExternalVolumeValidationError{
			field:  "Attribute",
			reason: "value must be one of the defined enum values",
		}
	}

	if utf8.RuneCountInString(m.GetUri()) < 1 {
		return ExternalVolumeValidationError{
			field:  "Uri",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// ExternalVolumeValidationError is the validation error returned by
// ExternalVolume.Validate if the designated constraints aren't met.
type ExternalVolumeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExternalVolumeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExternalVolumeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExternalVolumeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExternalVolumeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExternalVolumeValidationError) ErrorName() string { return "ExternalVolumeValidationError" }

// Error satisfies the builtin error interface
func (e ExternalVolumeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExternalVolume.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExternalVolumeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExternalVolumeValidationError{}

// Validate checks the field values on ExternalInstance with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ExternalInstance) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AffinityGroup

	if v, ok := interface{}(m.GetRequiredCapacity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExternalInstanceValidationError{
				field:  "RequiredCapacity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetSystemName()) < 1 {
		return ExternalInstanceValidationError{
			field:  "SystemName",
			reason: "value length must be at least 1 runes",
		}
	}

	if len(m.GetVolumes()) < 1 {
		return ExternalInstanceValidationError{
			field:  "Volumes",
			reason: "value must contain at least 1 pair(s)",
		}
	}

	for key, val := range m.GetVolumes() {
		_ = val

		// no validation rules for Volumes[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExternalInstanceValidationError{
					field:  fmt.Sprintf("Volumes[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Config

	return nil
}

// ExternalInstanceValidationError is the validation error returned by
// ExternalInstance.Validate if the designated constraints aren't met.
type ExternalInstanceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExternalInstanceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExternalInstanceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExternalInstanceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExternalInstanceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExternalInstanceValidationError) ErrorName() string { return "ExternalInstanceValidationError" }

// Error satisfies the builtin error interface
func (e ExternalInstanceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExternalInstance.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExternalInstanceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExternalInstanceValidationError{}

// Validate checks the field values on ExternalWorkload with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ExternalWorkload) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		return ExternalWorkloadValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
	}

	if _, ok := ExternalAffinityType_name[int32(m.GetAffinity())]; !ok {
		return ExternalWorkloadValidationError{
			field:  "Affinity",
			reason: "value must be one of the defined enum values",
		}
	}

	if len(m.GetInstances()) < 1 {
		return ExternalWorkloadValidationError{
			field:  "Instances",
			reason: "value must contain at least 1 pair(s)",
		}
	}

	for key, val := range m.GetInstances() {
		_ = val

		// no validation rules for Instances[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExternalWorkloadValidationError{
					field:  fmt.Sprintf("Instances[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ExternalWorkloadValidationError is the validation error returned by
// ExternalWorkload.Validate if the designated constraints aren't met.
type ExternalWorkloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExternalWorkloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExternalWorkloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExternalWorkloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExternalWorkloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExternalWorkloadValidationError) ErrorName() string { return "ExternalWorkloadValidationError" }

// Error satisfies the builtin error interface
func (e ExternalWorkloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExternalWorkload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExternalWorkloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExternalWorkloadValidationError{}
