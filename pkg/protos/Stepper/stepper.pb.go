// Code generated by protoc-gen-go. DO NOT EDIT.
// source: Stepper/stepper.proto

package stepper

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type StepperPolicy int32

const (
	StepperPolicy_Invalid  StepperPolicy = 0
	StepperPolicy_NoWait   StepperPolicy = 1
	StepperPolicy_Measured StepperPolicy = 2
	StepperPolicy_Manual   StepperPolicy = 3
)

var StepperPolicy_name = map[int32]string{
	0: "Invalid",
	1: "NoWait",
	2: "Measured",
	3: "Manual",
}

var StepperPolicy_value = map[string]int32{
	"Invalid":  0,
	"NoWait":   1,
	"Measured": 2,
	"Manual":   3,
}

func (x StepperPolicy) String() string {
	return proto.EnumName(StepperPolicy_name, int32(x))
}

func (StepperPolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a47a4dd6ded36602, []int{0}
}

type PolicyRequest struct {
	Policy               StepperPolicy      `protobuf:"varint,1,opt,name=policy,proto3,enum=stepper.StepperPolicy" json:"policy,omitempty"`
	MeasuredDelay        *duration.Duration `protobuf:"bytes,2,opt,name=measuredDelay,proto3" json:"measuredDelay,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *PolicyRequest) Reset()         { *m = PolicyRequest{} }
func (m *PolicyRequest) String() string { return proto.CompactTextString(m) }
func (*PolicyRequest) ProtoMessage()    {}
func (*PolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a47a4dd6ded36602, []int{0}
}

func (m *PolicyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PolicyRequest.Unmarshal(m, b)
}
func (m *PolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PolicyRequest.Marshal(b, m, deterministic)
}
func (m *PolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyRequest.Merge(m, src)
}
func (m *PolicyRequest) XXX_Size() int {
	return xxx_messageInfo_PolicyRequest.Size(m)
}
func (m *PolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyRequest proto.InternalMessageInfo

func (m *PolicyRequest) GetPolicy() StepperPolicy {
	if m != nil {
		return m.Policy
	}
	return StepperPolicy_Invalid
}

func (m *PolicyRequest) GetMeasuredDelay() *duration.Duration {
	if m != nil {
		return m.MeasuredDelay
	}
	return nil
}

type DelayRequest struct {
	AtLeast              int64    `protobuf:"varint,1,opt,name=atLeast,proto3" json:"atLeast,omitempty"`
	Jitter               int64    `protobuf:"varint,2,opt,name=jitter,proto3" json:"jitter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DelayRequest) Reset()         { *m = DelayRequest{} }
func (m *DelayRequest) String() string { return proto.CompactTextString(m) }
func (*DelayRequest) ProtoMessage()    {}
func (*DelayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a47a4dd6ded36602, []int{1}
}

func (m *DelayRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DelayRequest.Unmarshal(m, b)
}
func (m *DelayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DelayRequest.Marshal(b, m, deterministic)
}
func (m *DelayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelayRequest.Merge(m, src)
}
func (m *DelayRequest) XXX_Size() int {
	return xxx_messageInfo_DelayRequest.Size(m)
}
func (m *DelayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DelayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DelayRequest proto.InternalMessageInfo

func (m *DelayRequest) GetAtLeast() int64 {
	if m != nil {
		return m.AtLeast
	}
	return 0
}

func (m *DelayRequest) GetJitter() int64 {
	if m != nil {
		return m.Jitter
	}
	return 0
}

type SetToLatestRequest struct {
	FirstTicks           int64    `protobuf:"varint,1,opt,name=firstTicks,proto3" json:"firstTicks,omitempty"`
	SecondTicks          int64    `protobuf:"varint,2,opt,name=secondTicks,proto3" json:"secondTicks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetToLatestRequest) Reset()         { *m = SetToLatestRequest{} }
func (m *SetToLatestRequest) String() string { return proto.CompactTextString(m) }
func (*SetToLatestRequest) ProtoMessage()    {}
func (*SetToLatestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a47a4dd6ded36602, []int{2}
}

func (m *SetToLatestRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetToLatestRequest.Unmarshal(m, b)
}
func (m *SetToLatestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetToLatestRequest.Marshal(b, m, deterministic)
}
func (m *SetToLatestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetToLatestRequest.Merge(m, src)
}
func (m *SetToLatestRequest) XXX_Size() int {
	return xxx_messageInfo_SetToLatestRequest.Size(m)
}
func (m *SetToLatestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetToLatestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetToLatestRequest proto.InternalMessageInfo

func (m *SetToLatestRequest) GetFirstTicks() int64 {
	if m != nil {
		return m.FirstTicks
	}
	return 0
}

func (m *SetToLatestRequest) GetSecondTicks() int64 {
	if m != nil {
		return m.SecondTicks
	}
	return 0
}

type WaitForSyncRequest struct {
	AtLeast              int64    `protobuf:"varint,1,opt,name=atLeast,proto3" json:"atLeast,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WaitForSyncRequest) Reset()         { *m = WaitForSyncRequest{} }
func (m *WaitForSyncRequest) String() string { return proto.CompactTextString(m) }
func (*WaitForSyncRequest) ProtoMessage()    {}
func (*WaitForSyncRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a47a4dd6ded36602, []int{3}
}

func (m *WaitForSyncRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WaitForSyncRequest.Unmarshal(m, b)
}
func (m *WaitForSyncRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WaitForSyncRequest.Marshal(b, m, deterministic)
}
func (m *WaitForSyncRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WaitForSyncRequest.Merge(m, src)
}
func (m *WaitForSyncRequest) XXX_Size() int {
	return xxx_messageInfo_WaitForSyncRequest.Size(m)
}
func (m *WaitForSyncRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WaitForSyncRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WaitForSyncRequest proto.InternalMessageInfo

func (m *WaitForSyncRequest) GetAtLeast() int64 {
	if m != nil {
		return m.AtLeast
	}
	return 0
}

type TimeResponse struct {
	Current              int64    `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TimeResponse) Reset()         { *m = TimeResponse{} }
func (m *TimeResponse) String() string { return proto.CompactTextString(m) }
func (*TimeResponse) ProtoMessage()    {}
func (*TimeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a47a4dd6ded36602, []int{4}
}

func (m *TimeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimeResponse.Unmarshal(m, b)
}
func (m *TimeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimeResponse.Marshal(b, m, deterministic)
}
func (m *TimeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeResponse.Merge(m, src)
}
func (m *TimeResponse) XXX_Size() int {
	return xxx_messageInfo_TimeResponse.Size(m)
}
func (m *TimeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TimeResponse proto.InternalMessageInfo

func (m *TimeResponse) GetCurrent() int64 {
	if m != nil {
		return m.Current
	}
	return 0
}

func init() {
	proto.RegisterEnum("stepper.StepperPolicy", StepperPolicy_name, StepperPolicy_value)
	proto.RegisterType((*PolicyRequest)(nil), "stepper.PolicyRequest")
	proto.RegisterType((*DelayRequest)(nil), "stepper.DelayRequest")
	proto.RegisterType((*SetToLatestRequest)(nil), "stepper.SetToLatestRequest")
	proto.RegisterType((*WaitForSyncRequest)(nil), "stepper.WaitForSyncRequest")
	proto.RegisterType((*TimeResponse)(nil), "stepper.TimeResponse")
}

func init() { proto.RegisterFile("Stepper/stepper.proto", fileDescriptor_a47a4dd6ded36602) }

var fileDescriptor_a47a4dd6ded36602 = []byte{
	// 417 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0xcf, 0xcf, 0x93, 0x40,
	0x10, 0x95, 0xa2, 0xa0, 0x43, 0x6b, 0xc8, 0x26, 0x5f, 0x53, 0xfb, 0x25, 0x5f, 0x1a, 0x4e, 0x8d,
	0x07, 0x9a, 0xd4, 0x1f, 0x17, 0x0f, 0xfe, 0x48, 0x35, 0x31, 0x69, 0x1b, 0x03, 0x8d, 0x9e, 0xb7,
	0x30, 0x6d, 0x56, 0x29, 0x8b, 0xbb, 0x8b, 0x86, 0x9b, 0xff, 0xb2, 0xff, 0x81, 0x01, 0x96, 0x16,
	0x6c, 0xd0, 0x53, 0x3b, 0x33, 0x6f, 0xde, 0x7b, 0xcc, 0x5b, 0xb8, 0x09, 0x15, 0x66, 0x19, 0x8a,
	0x85, 0xac, 0x7f, 0xfd, 0x4c, 0x70, 0xc5, 0x89, 0xad, 0xcb, 0xe9, 0xed, 0x91, 0xf3, 0x63, 0x82,
	0x8b, 0xaa, 0xbd, 0xcf, 0x0f, 0x0b, 0x3c, 0x65, 0xaa, 0xa8, 0x51, 0xd3, 0xbb, 0xbf, 0x87, 0x71,
	0x2e, 0xa8, 0x62, 0x3c, 0xad, 0xe7, 0xde, 0x2f, 0x03, 0x46, 0x9f, 0x78, 0xc2, 0xa2, 0x22, 0xc0,
	0xef, 0x39, 0x4a, 0x45, 0x7c, 0xb0, 0xb2, 0xaa, 0x31, 0x31, 0x66, 0xc6, 0xfc, 0xf1, 0x72, 0xec,
	0x37, 0xba, 0xda, 0x87, 0x86, 0x6b, 0x14, 0x79, 0x0d, 0xa3, 0x13, 0x52, 0x99, 0x0b, 0x8c, 0x57,
	0x98, 0xd0, 0x62, 0x32, 0x98, 0x19, 0x73, 0x67, 0xf9, 0xc4, 0xaf, 0x95, 0xfd, 0x46, 0xd9, 0x5f,
	0x69, 0xe5, 0xa0, 0x8b, 0xf7, 0xde, 0xc0, 0xb0, 0xfa, 0xd3, 0x18, 0x98, 0x80, 0x4d, 0xd5, 0x1a,
	0xa9, 0x54, 0x95, 0x03, 0x33, 0x68, 0x4a, 0x32, 0x06, 0xeb, 0x2b, 0x53, 0x0a, 0x45, 0xa5, 0x61,
	0x06, 0xba, 0xf2, 0x3e, 0x03, 0x09, 0x51, 0xed, 0xf8, 0x9a, 0x2a, 0x94, 0xaa, 0xe1, 0xb9, 0x03,
	0x38, 0x30, 0x21, 0xd5, 0x8e, 0x45, 0xdf, 0xa4, 0xa6, 0x6a, 0x75, 0xc8, 0x0c, 0x1c, 0x89, 0x11,
	0x4f, 0xe3, 0x1a, 0x50, 0x53, 0xb6, 0x5b, 0x9e, 0x0f, 0xe4, 0x0b, 0x65, 0xea, 0x03, 0x17, 0x61,
	0x91, 0x46, 0xff, 0xf5, 0xe7, 0xcd, 0x61, 0xb8, 0x63, 0x27, 0x0c, 0x50, 0x66, 0x3c, 0x95, 0x58,
	0x22, 0xa3, 0x5c, 0x08, 0x4c, 0xcf, 0x48, 0x5d, 0x3e, 0x7d, 0x07, 0xa3, 0xce, 0x35, 0x89, 0x03,
	0xf6, 0xc7, 0xf4, 0x07, 0x4d, 0x58, 0xec, 0xde, 0x23, 0x00, 0xd6, 0x96, 0x97, 0xca, 0xae, 0x41,
	0x86, 0xf0, 0x70, 0xa3, 0xcf, 0xe5, 0x0e, 0xca, 0xc9, 0x86, 0xa6, 0x39, 0x4d, 0x5c, 0x73, 0xf9,
	0x7b, 0x00, 0xb6, 0x26, 0x21, 0xaf, 0xe0, 0x51, 0x88, 0x4a, 0x73, 0x5d, 0x12, 0xeb, 0x24, 0x3b,
	0x1d, 0x5f, 0x45, 0xf2, 0xbe, 0x7c, 0x29, 0xe4, 0x25, 0xdc, 0x2f, 0x79, 0x48, 0xcf, 0xbc, 0x77,
	0xef, 0x39, 0x98, 0x5b, 0xfe, 0xb3, 0x77, 0xed, 0xe6, 0x6c, 0xa3, 0x73, 0x94, 0x17, 0xf0, 0xa0,
	0x8a, 0x9b, 0x5c, 0xe6, 0xed, 0xf8, 0xfb, 0xd6, 0xde, 0x82, 0xd3, 0xca, 0x98, 0xdc, 0x5e, 0x5e,
	0xe5, 0x55, 0xf2, 0xff, 0xa0, 0x68, 0xc5, 0xd9, 0xa2, 0xb8, 0x0e, 0xb9, 0x87, 0x62, 0x6f, 0x55,
	0xdf, 0xf8, 0xec, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb9, 0x8b, 0xd0, 0xc1, 0x94, 0x03, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StepperClient is the client API for Stepper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StepperClient interface {
	// Set the stepper's policy governing the rate and conditions
	// for the simulated time to move forward.
	SetPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// When the stepper policy is for manual single-stepping, this
	// function forces a single step forward in simulated time.
	Step(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// Get the current simulated time.
	Now(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*TimeResponse, error)
	// Delay the simulated time by a specified amount +/- an allowed variance.
	// Do not return until that new time is current.
	Delay(ctx context.Context, in *DelayRequest, opts ...grpc.CallOption) (*TimeResponse, error)
	// Delay until the point in time that is the later of two simulated times.
	SetToLatest(ctx context.Context, in *SetToLatestRequest, opts ...grpc.CallOption) (*TimeResponse, error)
	// Wait for all contexts to reach the supplied simulated time.  Return
	// the current time when the wait occurred, which may be later than the
	// requested sync time.
	WaitForSync(ctx context.Context, in *WaitForSyncRequest, opts ...grpc.CallOption) (*TimeResponse, error)
}

type stepperClient struct {
	cc *grpc.ClientConn
}

func NewStepperClient(cc *grpc.ClientConn) StepperClient {
	return &stepperClient{cc}
}

func (c *stepperClient) SetPolicy(ctx context.Context, in *PolicyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/stepper.Stepper/SetPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stepperClient) Step(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/stepper.Stepper/Step", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stepperClient) Now(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*TimeResponse, error) {
	out := new(TimeResponse)
	err := c.cc.Invoke(ctx, "/stepper.Stepper/Now", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stepperClient) Delay(ctx context.Context, in *DelayRequest, opts ...grpc.CallOption) (*TimeResponse, error) {
	out := new(TimeResponse)
	err := c.cc.Invoke(ctx, "/stepper.Stepper/Delay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stepperClient) SetToLatest(ctx context.Context, in *SetToLatestRequest, opts ...grpc.CallOption) (*TimeResponse, error) {
	out := new(TimeResponse)
	err := c.cc.Invoke(ctx, "/stepper.Stepper/SetToLatest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stepperClient) WaitForSync(ctx context.Context, in *WaitForSyncRequest, opts ...grpc.CallOption) (*TimeResponse, error) {
	out := new(TimeResponse)
	err := c.cc.Invoke(ctx, "/stepper.Stepper/WaitForSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StepperServer is the server API for Stepper service.
type StepperServer interface {
	// Set the stepper's policy governing the rate and conditions
	// for the simulated time to move forward.
	SetPolicy(context.Context, *PolicyRequest) (*empty.Empty, error)
	// When the stepper policy is for manual single-stepping, this
	// function forces a single step forward in simulated time.
	Step(context.Context, *empty.Empty) (*empty.Empty, error)
	// Get the current simulated time.
	Now(context.Context, *empty.Empty) (*TimeResponse, error)
	// Delay the simulated time by a specified amount +/- an allowed variance.
	// Do not return until that new time is current.
	Delay(context.Context, *DelayRequest) (*TimeResponse, error)
	// Delay until the point in time that is the later of two simulated times.
	SetToLatest(context.Context, *SetToLatestRequest) (*TimeResponse, error)
	// Wait for all contexts to reach the supplied simulated time.  Return
	// the current time when the wait occurred, which may be later than the
	// requested sync time.
	WaitForSync(context.Context, *WaitForSyncRequest) (*TimeResponse, error)
}

// UnimplementedStepperServer can be embedded to have forward compatible implementations.
type UnimplementedStepperServer struct {
}

func (*UnimplementedStepperServer) SetPolicy(ctx context.Context, req *PolicyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPolicy not implemented")
}
func (*UnimplementedStepperServer) Step(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Step not implemented")
}
func (*UnimplementedStepperServer) Now(ctx context.Context, req *empty.Empty) (*TimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Now not implemented")
}
func (*UnimplementedStepperServer) Delay(ctx context.Context, req *DelayRequest) (*TimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delay not implemented")
}
func (*UnimplementedStepperServer) SetToLatest(ctx context.Context, req *SetToLatestRequest) (*TimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetToLatest not implemented")
}
func (*UnimplementedStepperServer) WaitForSync(ctx context.Context, req *WaitForSyncRequest) (*TimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitForSync not implemented")
}

func RegisterStepperServer(s *grpc.Server, srv StepperServer) {
	s.RegisterService(&_Stepper_serviceDesc, srv)
}

func _Stepper_SetPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StepperServer).SetPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stepper.Stepper/SetPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StepperServer).SetPolicy(ctx, req.(*PolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stepper_Step_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StepperServer).Step(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stepper.Stepper/Step",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StepperServer).Step(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stepper_Now_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StepperServer).Now(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stepper.Stepper/Now",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StepperServer).Now(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stepper_Delay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StepperServer).Delay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stepper.Stepper/Delay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StepperServer).Delay(ctx, req.(*DelayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stepper_SetToLatest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetToLatestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StepperServer).SetToLatest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stepper.Stepper/SetToLatest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StepperServer).SetToLatest(ctx, req.(*SetToLatestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stepper_WaitForSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitForSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StepperServer).WaitForSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stepper.Stepper/WaitForSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StepperServer).WaitForSync(ctx, req.(*WaitForSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Stepper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stepper.Stepper",
	HandlerType: (*StepperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetPolicy",
			Handler:    _Stepper_SetPolicy_Handler,
		},
		{
			MethodName: "Step",
			Handler:    _Stepper_Step_Handler,
		},
		{
			MethodName: "Now",
			Handler:    _Stepper_Now_Handler,
		},
		{
			MethodName: "Delay",
			Handler:    _Stepper_Delay_Handler,
		},
		{
			MethodName: "SetToLatest",
			Handler:    _Stepper_SetToLatest_Handler,
		},
		{
			MethodName: "WaitForSync",
			Handler:    _Stepper_WaitForSync_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Stepper/stepper.proto",
}
