// Code generated by protoc-gen-go. DO NOT EDIT.
// source: Stepper/stepper.proto

package stepper

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// This represents a simulated time context that is managed by the stepper.
// Each context is allowed to proceed somewhat independently, but is tracked
// to allow for the overall system to synchronize when it is necessary.
type SimulatedTime struct {
	// The current simulated time in ticks
	Ticks int64 `protobuf:"varint,1,opt,name=ticks,proto3" json:"ticks,omitempty"`
	// Identifies the specific context
	Id                   int64    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SimulatedTime) Reset()         { *m = SimulatedTime{} }
func (m *SimulatedTime) String() string { return proto.CompactTextString(m) }
func (*SimulatedTime) ProtoMessage()    {}
func (*SimulatedTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_a47a4dd6ded36602, []int{0}
}

func (m *SimulatedTime) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SimulatedTime.Unmarshal(m, b)
}
func (m *SimulatedTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SimulatedTime.Marshal(b, m, deterministic)
}
func (m *SimulatedTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimulatedTime.Merge(m, src)
}
func (m *SimulatedTime) XXX_Size() int {
	return xxx_messageInfo_SimulatedTime.Size(m)
}
func (m *SimulatedTime) XXX_DiscardUnknown() {
	xxx_messageInfo_SimulatedTime.DiscardUnknown(m)
}

var xxx_messageInfo_SimulatedTime proto.InternalMessageInfo

func (m *SimulatedTime) GetTicks() int64 {
	if m != nil {
		return m.Ticks
	}
	return 0
}

func (m *SimulatedTime) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type CreateResponse struct {
	Context              *SimulatedTime `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *CreateResponse) Reset()         { *m = CreateResponse{} }
func (m *CreateResponse) String() string { return proto.CompactTextString(m) }
func (*CreateResponse) ProtoMessage()    {}
func (*CreateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a47a4dd6ded36602, []int{1}
}

func (m *CreateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateResponse.Unmarshal(m, b)
}
func (m *CreateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateResponse.Marshal(b, m, deterministic)
}
func (m *CreateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateResponse.Merge(m, src)
}
func (m *CreateResponse) XXX_Size() int {
	return xxx_messageInfo_CreateResponse.Size(m)
}
func (m *CreateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateResponse proto.InternalMessageInfo

func (m *CreateResponse) GetContext() *SimulatedTime {
	if m != nil {
		return m.Context
	}
	return nil
}

type CloneRequest struct {
	Context              *SimulatedTime `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *CloneRequest) Reset()         { *m = CloneRequest{} }
func (m *CloneRequest) String() string { return proto.CompactTextString(m) }
func (*CloneRequest) ProtoMessage()    {}
func (*CloneRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a47a4dd6ded36602, []int{2}
}

func (m *CloneRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloneRequest.Unmarshal(m, b)
}
func (m *CloneRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloneRequest.Marshal(b, m, deterministic)
}
func (m *CloneRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloneRequest.Merge(m, src)
}
func (m *CloneRequest) XXX_Size() int {
	return xxx_messageInfo_CloneRequest.Size(m)
}
func (m *CloneRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CloneRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CloneRequest proto.InternalMessageInfo

func (m *CloneRequest) GetContext() *SimulatedTime {
	if m != nil {
		return m.Context
	}
	return nil
}

type CloneResponse struct {
	Context              *SimulatedTime `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *CloneResponse) Reset()         { *m = CloneResponse{} }
func (m *CloneResponse) String() string { return proto.CompactTextString(m) }
func (*CloneResponse) ProtoMessage()    {}
func (*CloneResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a47a4dd6ded36602, []int{3}
}

func (m *CloneResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloneResponse.Unmarshal(m, b)
}
func (m *CloneResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloneResponse.Marshal(b, m, deterministic)
}
func (m *CloneResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloneResponse.Merge(m, src)
}
func (m *CloneResponse) XXX_Size() int {
	return xxx_messageInfo_CloneResponse.Size(m)
}
func (m *CloneResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CloneResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CloneResponse proto.InternalMessageInfo

func (m *CloneResponse) GetContext() *SimulatedTime {
	if m != nil {
		return m.Context
	}
	return nil
}

type DelayRequest struct {
	BaseTime             *SimulatedTime `protobuf:"bytes,1,opt,name=baseTime,proto3" json:"baseTime,omitempty"`
	Ticks                int64          `protobuf:"varint,2,opt,name=ticks,proto3" json:"ticks,omitempty"`
	Variance             int64          `protobuf:"varint,3,opt,name=variance,proto3" json:"variance,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *DelayRequest) Reset()         { *m = DelayRequest{} }
func (m *DelayRequest) String() string { return proto.CompactTextString(m) }
func (*DelayRequest) ProtoMessage()    {}
func (*DelayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a47a4dd6ded36602, []int{4}
}

func (m *DelayRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DelayRequest.Unmarshal(m, b)
}
func (m *DelayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DelayRequest.Marshal(b, m, deterministic)
}
func (m *DelayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelayRequest.Merge(m, src)
}
func (m *DelayRequest) XXX_Size() int {
	return xxx_messageInfo_DelayRequest.Size(m)
}
func (m *DelayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DelayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DelayRequest proto.InternalMessageInfo

func (m *DelayRequest) GetBaseTime() *SimulatedTime {
	if m != nil {
		return m.BaseTime
	}
	return nil
}

func (m *DelayRequest) GetTicks() int64 {
	if m != nil {
		return m.Ticks
	}
	return 0
}

func (m *DelayRequest) GetVariance() int64 {
	if m != nil {
		return m.Variance
	}
	return 0
}

type DelayResponse struct {
	Context              *SimulatedTime `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *DelayResponse) Reset()         { *m = DelayResponse{} }
func (m *DelayResponse) String() string { return proto.CompactTextString(m) }
func (*DelayResponse) ProtoMessage()    {}
func (*DelayResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a47a4dd6ded36602, []int{5}
}

func (m *DelayResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DelayResponse.Unmarshal(m, b)
}
func (m *DelayResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DelayResponse.Marshal(b, m, deterministic)
}
func (m *DelayResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelayResponse.Merge(m, src)
}
func (m *DelayResponse) XXX_Size() int {
	return xxx_messageInfo_DelayResponse.Size(m)
}
func (m *DelayResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DelayResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DelayResponse proto.InternalMessageInfo

func (m *DelayResponse) GetContext() *SimulatedTime {
	if m != nil {
		return m.Context
	}
	return nil
}

type DisposeRequest struct {
	Context              *SimulatedTime `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *DisposeRequest) Reset()         { *m = DisposeRequest{} }
func (m *DisposeRequest) String() string { return proto.CompactTextString(m) }
func (*DisposeRequest) ProtoMessage()    {}
func (*DisposeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a47a4dd6ded36602, []int{6}
}

func (m *DisposeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DisposeRequest.Unmarshal(m, b)
}
func (m *DisposeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DisposeRequest.Marshal(b, m, deterministic)
}
func (m *DisposeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisposeRequest.Merge(m, src)
}
func (m *DisposeRequest) XXX_Size() int {
	return xxx_messageInfo_DisposeRequest.Size(m)
}
func (m *DisposeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DisposeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DisposeRequest proto.InternalMessageInfo

func (m *DisposeRequest) GetContext() *SimulatedTime {
	if m != nil {
		return m.Context
	}
	return nil
}

type SetToLatestRequest struct {
	Context1             *SimulatedTime `protobuf:"bytes,1,opt,name=context1,proto3" json:"context1,omitempty"`
	Context2             *SimulatedTime `protobuf:"bytes,2,opt,name=context2,proto3" json:"context2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *SetToLatestRequest) Reset()         { *m = SetToLatestRequest{} }
func (m *SetToLatestRequest) String() string { return proto.CompactTextString(m) }
func (*SetToLatestRequest) ProtoMessage()    {}
func (*SetToLatestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a47a4dd6ded36602, []int{7}
}

func (m *SetToLatestRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetToLatestRequest.Unmarshal(m, b)
}
func (m *SetToLatestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetToLatestRequest.Marshal(b, m, deterministic)
}
func (m *SetToLatestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetToLatestRequest.Merge(m, src)
}
func (m *SetToLatestRequest) XXX_Size() int {
	return xxx_messageInfo_SetToLatestRequest.Size(m)
}
func (m *SetToLatestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetToLatestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetToLatestRequest proto.InternalMessageInfo

func (m *SetToLatestRequest) GetContext1() *SimulatedTime {
	if m != nil {
		return m.Context1
	}
	return nil
}

func (m *SetToLatestRequest) GetContext2() *SimulatedTime {
	if m != nil {
		return m.Context2
	}
	return nil
}

type SetToLatestResponse struct {
	Context              *SimulatedTime `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *SetToLatestResponse) Reset()         { *m = SetToLatestResponse{} }
func (m *SetToLatestResponse) String() string { return proto.CompactTextString(m) }
func (*SetToLatestResponse) ProtoMessage()    {}
func (*SetToLatestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a47a4dd6ded36602, []int{8}
}

func (m *SetToLatestResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetToLatestResponse.Unmarshal(m, b)
}
func (m *SetToLatestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetToLatestResponse.Marshal(b, m, deterministic)
}
func (m *SetToLatestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetToLatestResponse.Merge(m, src)
}
func (m *SetToLatestResponse) XXX_Size() int {
	return xxx_messageInfo_SetToLatestResponse.Size(m)
}
func (m *SetToLatestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetToLatestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetToLatestResponse proto.InternalMessageInfo

func (m *SetToLatestResponse) GetContext() *SimulatedTime {
	if m != nil {
		return m.Context
	}
	return nil
}

type WaitForSyncRequest struct {
	Context              *SimulatedTime `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *WaitForSyncRequest) Reset()         { *m = WaitForSyncRequest{} }
func (m *WaitForSyncRequest) String() string { return proto.CompactTextString(m) }
func (*WaitForSyncRequest) ProtoMessage()    {}
func (*WaitForSyncRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a47a4dd6ded36602, []int{9}
}

func (m *WaitForSyncRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WaitForSyncRequest.Unmarshal(m, b)
}
func (m *WaitForSyncRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WaitForSyncRequest.Marshal(b, m, deterministic)
}
func (m *WaitForSyncRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WaitForSyncRequest.Merge(m, src)
}
func (m *WaitForSyncRequest) XXX_Size() int {
	return xxx_messageInfo_WaitForSyncRequest.Size(m)
}
func (m *WaitForSyncRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WaitForSyncRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WaitForSyncRequest proto.InternalMessageInfo

func (m *WaitForSyncRequest) GetContext() *SimulatedTime {
	if m != nil {
		return m.Context
	}
	return nil
}

type WaitForSyncResponse struct {
	Context              *SimulatedTime `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *WaitForSyncResponse) Reset()         { *m = WaitForSyncResponse{} }
func (m *WaitForSyncResponse) String() string { return proto.CompactTextString(m) }
func (*WaitForSyncResponse) ProtoMessage()    {}
func (*WaitForSyncResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a47a4dd6ded36602, []int{10}
}

func (m *WaitForSyncResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WaitForSyncResponse.Unmarshal(m, b)
}
func (m *WaitForSyncResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WaitForSyncResponse.Marshal(b, m, deterministic)
}
func (m *WaitForSyncResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WaitForSyncResponse.Merge(m, src)
}
func (m *WaitForSyncResponse) XXX_Size() int {
	return xxx_messageInfo_WaitForSyncResponse.Size(m)
}
func (m *WaitForSyncResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WaitForSyncResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WaitForSyncResponse proto.InternalMessageInfo

func (m *WaitForSyncResponse) GetContext() *SimulatedTime {
	if m != nil {
		return m.Context
	}
	return nil
}

func init() {
	proto.RegisterType((*SimulatedTime)(nil), "stepper.SimulatedTime")
	proto.RegisterType((*CreateResponse)(nil), "stepper.CreateResponse")
	proto.RegisterType((*CloneRequest)(nil), "stepper.CloneRequest")
	proto.RegisterType((*CloneResponse)(nil), "stepper.CloneResponse")
	proto.RegisterType((*DelayRequest)(nil), "stepper.DelayRequest")
	proto.RegisterType((*DelayResponse)(nil), "stepper.DelayResponse")
	proto.RegisterType((*DisposeRequest)(nil), "stepper.DisposeRequest")
	proto.RegisterType((*SetToLatestRequest)(nil), "stepper.SetToLatestRequest")
	proto.RegisterType((*SetToLatestResponse)(nil), "stepper.SetToLatestResponse")
	proto.RegisterType((*WaitForSyncRequest)(nil), "stepper.WaitForSyncRequest")
	proto.RegisterType((*WaitForSyncResponse)(nil), "stepper.WaitForSyncResponse")
}

func init() { proto.RegisterFile("Stepper/stepper.proto", fileDescriptor_a47a4dd6ded36602) }

var fileDescriptor_a47a4dd6ded36602 = []byte{
	// 415 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0x4d, 0xaf, 0xd2, 0x40,
	0x14, 0x95, 0x12, 0x28, 0xb9, 0x7c, 0x2c, 0x06, 0x41, 0x52, 0x5c, 0x98, 0xae, 0x5c, 0x15, 0xad,
	0xd1, 0x85, 0x6e, 0x14, 0x10, 0x5c, 0xb8, 0x6a, 0x49, 0x5c, 0x0f, 0xe5, 0x4a, 0x26, 0x96, 0x4e,
	0xed, 0x0c, 0x46, 0x92, 0xb7, 0x7e, 0xbf, 0xfb, 0xa5, 0xd3, 0x96, 0x4e, 0x1f, 0xbc, 0x90, 0xf4,
	0xad, 0x9a, 0x99, 0x39, 0xf7, 0xdc, 0xd3, 0x73, 0xef, 0x81, 0x91, 0x2f, 0x31, 0x8e, 0x31, 0x99,
	0x89, 0xec, 0xeb, 0xc4, 0x09, 0x97, 0x9c, 0x98, 0xf9, 0xd1, 0x9a, 0xee, 0x39, 0xdf, 0x87, 0x38,
	0x53, 0xd7, 0xdb, 0xe3, 0xef, 0x19, 0x1e, 0x62, 0x79, 0xca, 0x50, 0xf6, 0x47, 0xe8, 0xfb, 0xec,
	0x70, 0x0c, 0xa9, 0xc4, 0xdd, 0x86, 0x1d, 0x90, 0xbc, 0x84, 0x96, 0x64, 0xc1, 0x1f, 0x31, 0x69,
	0xbc, 0x69, 0xbc, 0x6d, 0x7a, 0xd9, 0x81, 0x0c, 0xc0, 0x60, 0xbb, 0x89, 0xa1, 0xae, 0x0c, 0xb6,
	0xb3, 0xe7, 0x30, 0x58, 0x24, 0x48, 0x25, 0x7a, 0x28, 0x62, 0x1e, 0x09, 0x24, 0xef, 0xc0, 0x0c,
	0x78, 0x24, 0xf1, 0xbf, 0x54, 0x95, 0x5d, 0x77, 0xec, 0x14, 0x7a, 0x2a, 0x0d, 0xbc, 0x02, 0x66,
	0x7f, 0x85, 0xde, 0x22, 0xe4, 0x11, 0x7a, 0xf8, 0xf7, 0x88, 0x42, 0xd6, 0x60, 0xf8, 0x06, 0xfd,
	0x9c, 0xa1, 0xb6, 0x08, 0x09, 0xbd, 0x25, 0x86, 0xf4, 0x54, 0x88, 0x70, 0xa1, 0xb3, 0xa5, 0x02,
	0x53, 0xd0, 0x0d, 0x8a, 0x33, 0xae, 0xb4, 0xcc, 0xd0, 0x2d, 0xb3, 0xa0, 0xf3, 0x8f, 0x26, 0x8c,
	0x46, 0x01, 0x4e, 0x9a, 0xea, 0xe1, 0x7c, 0x4e, 0x85, 0xe7, 0x5d, 0x6b, 0x0b, 0x9f, 0xc3, 0x60,
	0xc9, 0x44, 0xcc, 0xc5, 0x33, 0xfc, 0xbb, 0x03, 0xe2, 0xa3, 0xdc, 0xf0, 0x9f, 0x54, 0xa2, 0x90,
	0x9a, 0x05, 0x39, 0xe0, 0xfd, 0x2d, 0x0b, 0x0a, 0x9c, 0x56, 0xe3, 0x2a, 0x17, 0x6e, 0xd7, 0xb8,
	0xf6, 0x1a, 0x86, 0x95, 0xee, 0xb5, 0xad, 0x58, 0x01, 0xf9, 0x45, 0x99, 0x5c, 0xf1, 0xc4, 0x3f,
	0x45, 0x41, 0x7d, 0x3b, 0xd6, 0x30, 0xac, 0xf0, 0xd4, 0x15, 0xe4, 0xde, 0x37, 0xc1, 0xcc, 0x43,
	0x49, 0xbe, 0x40, 0x3b, 0x4b, 0x0a, 0x19, 0x3b, 0x59, 0x10, 0x9d, 0x22, 0x88, 0xce, 0xf7, 0x34,
	0x88, 0xd6, 0xab, 0x33, 0x5d, 0x35, 0x52, 0xf6, 0x0b, 0xf2, 0x09, 0x5a, 0x6a, 0xc1, 0xc9, 0xa8,
	0xc4, 0x68, 0x91, 0xb1, 0xc6, 0x8f, 0xaf, 0x73, 0xc9, 0x9f, 0xc1, 0xcc, 0x97, 0x83, 0x94, 0xec,
	0xd5, 0x75, 0xb1, 0x9e, 0x90, 0x93, 0xf6, 0x54, 0xbb, 0xa9, 0xf5, 0xd4, 0x13, 0xa2, 0xf5, 0xac,
	0xae, 0xf0, 0x0f, 0xe8, 0x6a, 0xe3, 0x24, 0xd3, 0xd2, 0xa4, 0x8b, 0x15, 0xb3, 0x5e, 0x5f, 0x7f,
	0x2c, 0x99, 0xb4, 0x39, 0x68, 0x4c, 0x97, 0x53, 0xd6, 0x98, 0xae, 0x8c, 0x6e, 0xdb, 0x56, 0xff,
	0xf6, 0xe1, 0x21, 0x00, 0x00, 0xff, 0xff, 0xcb, 0x05, 0xfc, 0x4c, 0x23, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StepperClient is the client API for Stepper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StepperClient interface {
	// Create a new simulated time context, at the latest known time.
	Create(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CreateResponse, error)
	// Create a new simulated time context, at the source's known time.
	Clone(ctx context.Context, in *CloneRequest, opts ...grpc.CallOption) (*CloneResponse, error)
	// Release a simulated time context.  All future uses of it are invalid.
	Dispose(ctx context.Context, in *DisposeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Delay the simulated time by a specified amount +/- an allowed variance.
	// Do not return until that new time is current.
	Delay(ctx context.Context, in *DelayRequest, opts ...grpc.CallOption) (*DelayResponse, error)
	// Delay until the point in time that is the later of two simulated times.
	SetToLatest(ctx context.Context, in *SetToLatestRequest, opts ...grpc.CallOption) (*SetToLatestResponse, error)
	// Wait for all contexts to reach the supplied simulated time.  Return
	// the current time when the wait occurred, which may be later than the
	// requested sync time.
	WaitForSync(ctx context.Context, in *WaitForSyncRequest, opts ...grpc.CallOption) (*WaitForSyncResponse, error)
}

type stepperClient struct {
	cc *grpc.ClientConn
}

func NewStepperClient(cc *grpc.ClientConn) StepperClient {
	return &stepperClient{cc}
}

func (c *stepperClient) Create(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/stepper.Stepper/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stepperClient) Clone(ctx context.Context, in *CloneRequest, opts ...grpc.CallOption) (*CloneResponse, error) {
	out := new(CloneResponse)
	err := c.cc.Invoke(ctx, "/stepper.Stepper/Clone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stepperClient) Dispose(ctx context.Context, in *DisposeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/stepper.Stepper/Dispose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stepperClient) Delay(ctx context.Context, in *DelayRequest, opts ...grpc.CallOption) (*DelayResponse, error) {
	out := new(DelayResponse)
	err := c.cc.Invoke(ctx, "/stepper.Stepper/Delay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stepperClient) SetToLatest(ctx context.Context, in *SetToLatestRequest, opts ...grpc.CallOption) (*SetToLatestResponse, error) {
	out := new(SetToLatestResponse)
	err := c.cc.Invoke(ctx, "/stepper.Stepper/SetToLatest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stepperClient) WaitForSync(ctx context.Context, in *WaitForSyncRequest, opts ...grpc.CallOption) (*WaitForSyncResponse, error) {
	out := new(WaitForSyncResponse)
	err := c.cc.Invoke(ctx, "/stepper.Stepper/WaitForSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StepperServer is the server API for Stepper service.
type StepperServer interface {
	// Create a new simulated time context, at the latest known time.
	Create(context.Context, *empty.Empty) (*CreateResponse, error)
	// Create a new simulated time context, at the source's known time.
	Clone(context.Context, *CloneRequest) (*CloneResponse, error)
	// Release a simulated time context.  All future uses of it are invalid.
	Dispose(context.Context, *DisposeRequest) (*empty.Empty, error)
	// Delay the simulated time by a specified amount +/- an allowed variance.
	// Do not return until that new time is current.
	Delay(context.Context, *DelayRequest) (*DelayResponse, error)
	// Delay until the point in time that is the later of two simulated times.
	SetToLatest(context.Context, *SetToLatestRequest) (*SetToLatestResponse, error)
	// Wait for all contexts to reach the supplied simulated time.  Return
	// the current time when the wait occurred, which may be later than the
	// requested sync time.
	WaitForSync(context.Context, *WaitForSyncRequest) (*WaitForSyncResponse, error)
}

// UnimplementedStepperServer can be embedded to have forward compatible implementations.
type UnimplementedStepperServer struct {
}

func (*UnimplementedStepperServer) Create(ctx context.Context, req *empty.Empty) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedStepperServer) Clone(ctx context.Context, req *CloneRequest) (*CloneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clone not implemented")
}
func (*UnimplementedStepperServer) Dispose(ctx context.Context, req *DisposeRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dispose not implemented")
}
func (*UnimplementedStepperServer) Delay(ctx context.Context, req *DelayRequest) (*DelayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delay not implemented")
}
func (*UnimplementedStepperServer) SetToLatest(ctx context.Context, req *SetToLatestRequest) (*SetToLatestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetToLatest not implemented")
}
func (*UnimplementedStepperServer) WaitForSync(ctx context.Context, req *WaitForSyncRequest) (*WaitForSyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitForSync not implemented")
}

func RegisterStepperServer(s *grpc.Server, srv StepperServer) {
	s.RegisterService(&_Stepper_serviceDesc, srv)
}

func _Stepper_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StepperServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stepper.Stepper/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StepperServer).Create(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stepper_Clone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StepperServer).Clone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stepper.Stepper/Clone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StepperServer).Clone(ctx, req.(*CloneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stepper_Dispose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisposeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StepperServer).Dispose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stepper.Stepper/Dispose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StepperServer).Dispose(ctx, req.(*DisposeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stepper_Delay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StepperServer).Delay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stepper.Stepper/Delay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StepperServer).Delay(ctx, req.(*DelayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stepper_SetToLatest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetToLatestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StepperServer).SetToLatest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stepper.Stepper/SetToLatest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StepperServer).SetToLatest(ctx, req.(*SetToLatestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stepper_WaitForSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitForSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StepperServer).WaitForSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stepper.Stepper/WaitForSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StepperServer).WaitForSync(ctx, req.(*WaitForSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Stepper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stepper.Stepper",
	HandlerType: (*StepperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Stepper_Create_Handler,
		},
		{
			MethodName: "Clone",
			Handler:    _Stepper_Clone_Handler,
		},
		{
			MethodName: "Dispose",
			Handler:    _Stepper_Dispose_Handler,
		},
		{
			MethodName: "Delay",
			Handler:    _Stepper_Delay_Handler,
		},
		{
			MethodName: "SetToLatest",
			Handler:    _Stepper_SetToLatest_Handler,
		},
		{
			MethodName: "WaitForSync",
			Handler:    _Stepper_WaitForSync_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Stepper/stepper.proto",
}
