syntax = "proto3";

package stepper;

import "github.com/Jim3Things/CloudChamber/pkg/protos/common/timestamp.proto";

import "google/protobuf/empty.proto";
import "google/protobuf/duration.proto";

option go_package="github.com/Jim3Things/CloudChamber/pkg/protos/Stepper";

// This service manages the overall passage of time.
//
// Simulated time is described in terms of arbitrary 'ticks', that
// are not necessarily congruent with any particular time period, such
// as 'seconds' or 'milliseconds'.  They are simply points in time when
// the significant changes happen.
//
service Stepper {
    // Set the stepper's policy governing the rate and conditions
    // for the simulated time to move forward.
    rpc SetPolicy(PolicyRequest) returns (google.protobuf.Empty);

    // When the stepper policy is for manual single-stepping, this
    // function forces a single step forward in simulated time.
    rpc Step(StepRequest) returns (google.protobuf.Empty);

    // Get the current simulated time.
    rpc Now(NowRequest) returns (common.Timestamp);

    // Delay the simulated time by a specified amount +/- an allowed variance.
    // Do not return until that new time is current.
    rpc Delay (DelayRequest) returns (common.Timestamp);

    // Forcibly reset the stepper's internal state back to its starting
    // point.
    rpc Reset (ResetRequest) returns (google.protobuf.Empty);
}

// Define the various simulated time stepping policies
enum StepperPolicy {
    // Default value, indicates an uninitialized stepper
    Invalid = 0;

    // Policy that immediately moves the simulated time forward with any
    // wait operation.  Useful for shortening test runs.
    NoWait = 1;

    // Policy that magnifies time, but still proceeds forward automatically.
    // This option requires a delay per tick to determine how fast time runs
    Measured = 2;

    // Policy that requires manual stepping of time.  Simulated time only
    // moves forward as a result of an externally generated step command.
    Manual = 3;
}

// The following messages are the encapsulations for the rpc calls above.
// Even when there are currently only one field, they are encapsulated in
// order to allow easier future expansion.

// Define the parameters to a stepper policy request parameters
message PolicyRequest {
    // Required policy (cannot be Invalid)
    StepperPolicy policy = 1;

    // Number of seconds between ticks.  Only valid for the "Measured" policy.
    google.protobuf.Duration measuredDelay = 2;
}

// Define the request associated with a Step operation
message StepRequest { }

// Define the request associated with a current time query
message NowRequest { }

// Define the parameters when requesting a delay
message DelayRequest {
    // The minimum simulated time before the delay is completed.
    common.Timestamp atLeast = 1;

    // An additional maximum number of ticks that can be added to the delay.
    // A random number of ticks [0-jitter) are added to the delay time.  This
    // is to simulate the random delays seen in, e.g., disk I/O or network
    // communications.
    int64 jitter = 2;
}

// Define the request associated with a forcible reset
message ResetRequest { }

// Internally used message to cause a simulate time advance based on timer
// expiry
message AutoStepRequest {
    // The epoch number associated with the repeating timer call.  Ignore
    // this message if this value does not match the last timer's epoch.
    int64 epoch = 1;
}