syntax = "proto3";

package stepper;

import "google/protobuf/empty.proto";
import "google/protobuf/duration.proto";

// This service manages the overall passage of time.
service Stepper {
    // Set the stepper's policy governing the rate and conditions
    // for the simulated time to move forward.
    rpc SetPolicy(PolicyRequest) returns (google.protobuf.Empty);

    // When the stepper policy is for manual single-stepping, this
    // function forces a single step forward in simulated time.
    rpc Step(google.protobuf.Empty) returns (google.protobuf.Empty);

    // Get the current simulated time.
    rpc Now(google.protobuf.Empty) returns (TimeResponse);

    // Delay the simulated time by a specified amount +/- an allowed variance.
    // Do not return until that new time is current.
    rpc Delay (DelayRequest) returns (TimeResponse);

    // Delay until the point in time that is the later of two simulated times.
    rpc SetToLatest (SetToLatestRequest) returns (TimeResponse);

    // Wait for all contexts to reach the supplied simulated time.  Return
    // the current time when the wait occurred, which may be later than the
    // requested sync time.
    rpc WaitForSync (WaitForSyncRequest) returns (TimeResponse);
}

enum StepperPolicy {
    Invalid = 0;
    NoWait = 1;
    Measured = 2;
    Manual = 3;
}

// The following messages are the encapsulations for the rpc calls above.
// Even when there are currently only one field, they are encapsulated in
// order to allow easier future expansion.

message PolicyRequest {
    StepperPolicy policy = 1;
    google.protobuf.Duration measuredDelay = 2;
}

message DelayRequest {
    int64 atLeast = 1;
    int64 jitter = 2;
}

message SetToLatestRequest {
    int64 firstTicks = 1;
    int64 secondTicks = 2;
}

message WaitForSyncRequest {
    int64 atLeast = 1;
}

message TimeResponse {
    int64 current = 1;
}