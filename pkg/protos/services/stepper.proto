syntax = "proto3";

package services;

import "github.com/Jim3Things/CloudChamber/pkg/protos/common/timestamp.proto";
import "github.com/Jim3Things/CloudChamber/pkg/protos/services/requests.proto";

import "google/protobuf/empty.proto";

option go_package = "github.com/Jim3Things/CloudChamber/pkg/protos/services";

// This service manages the overall passage of time.
//
// Simulated time is described in terms of arbitrary 'ticks', that
// are not necessarily congruent with any particular time period, such
// as 'seconds' or 'milliseconds'.  They are simply points in time when
// the significant changes happen.
//
service Stepper {
    // Set the stepper's policy governing the rate and conditions
    // for the simulated time to move forward.
    rpc SetPolicy(PolicyRequest) returns (google.protobuf.Empty);

    // When the stepper policy is for manual single-stepping, this
    // function forces a single step forward in simulated time.
    rpc Step(StepRequest) returns (google.protobuf.Empty);

    // Get the current simulated time.
    rpc Now(NowRequest) returns (common.Timestamp);

    // Delay the simulated time by a specified amount +/- an allowed variance.
    // Do not return until that new time is current.
    rpc Delay(DelayRequest) returns (common.Timestamp);

    // Forcibly reset the stepper's internal state back to its starting
    // point.
    rpc Reset(ResetRequest) returns (google.protobuf.Empty);

    // Get the current status for the stepper service
    rpc GetStatus(GetStatusRequest) returns (StatusResponse);
}
