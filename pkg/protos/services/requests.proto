syntax = "proto3";

package services;

import "github.com/Jim3Things/CloudChamber/pkg/protos/common/timestamp.proto";
import "github.com/Jim3Things/CloudChamber/pkg/protos/log/entry.proto";

import "google/protobuf/duration.proto";

option go_package = "github.com/Jim3Things/CloudChamber/simulation/pkg/protos/services";
option csharp_namespace = "CloudChamber.Protos.Services";

// +++ Shared messages

// Define the request associated with a forcible reset
message ResetRequest {}

// --- Shared messages

// +++ Stepper specific messages

// Define the various simulated time stepping policies
enum StepperPolicy {
    // Default value, indicates an uninitialized stepper
    Invalid = 0;

    // Policy that immediately moves the simulated time forward with any
    // wait operation.  Useful for shortening test runs.
    NoWait = 1;

    // Policy that magnifies time, but still proceeds forward automatically.
    // This option requires a delay per tick to determine how fast time runs
    Measured = 2;

    // Policy that requires manual stepping of time.  Simulated time only
    // moves forward as a result of an externally generated step command.
    Manual = 3;
}

// The following messages are the encapsulations for the rpc calls above.
// Even when there are currently only one field, they are encapsulated in
// order to allow easier future expansion.

// Define the parameters to a stepper policy request parameters
message PolicyRequest {
    // Required policy (cannot be Invalid)
    StepperPolicy policy = 1;

    // Number of seconds between ticks.  Only valid for the "Measured" policy.
    google.protobuf.Duration measuredDelay = 2;

    // If non-negative, require that the current policy revision number match
    // Negative values do not require a match, and force an unconditional
    // application of the new policy
    int64 matchEpoch = 3;
}

// Define the request associated with a Step operation
message StepRequest {}

// Define the request associated with a current time query
message NowRequest {}

// Define the parameters when requesting a delay
message DelayRequest {
    // The minimum simulated time before the delay is completed.
    common.Timestamp atLeast = 1;

    // An additional maximum number of ticks that can be added to the delay.
    // A random number of ticks [0-jitter) are added to the delay time.  This
    // is to simulate the random delays seen in, e.g., disk I/O or network
    // communications.
    int64 jitter = 2;
}

// Define the request associated with a status request
message GetStatusRequest {}

// Internally used message to cause a simulate time advance based on timer
// expiry
message AutoStepRequest {
    // The epoch number associated with the repeating timer call.  Ignore
    // this message if this value does not match the last timer's epoch.
    int64 epoch = 1;
}

// Define the current status response message
message StatusResponse {
    // Current stepper policy
    StepperPolicy policy = 1;

    // Current measured delay - should be zero if the policy is not "Measured"
    google.protobuf.Duration measuredDelay = 2;

    // Current simulated time
    common.Timestamp now = 3;

    // Number of active waiters (number of outstanding delay calls)
    int64 waiter_count = 4;

    // Current policy version number
    int64 epoch = 5;
}

// --- Stepper specific messages

// +++ Stepper persisted state

// StepperState contains the state machine internal state necessary to restore
// the current simulated time on restart.
// NB: This is currently mostly latent - only the state machine state values are
// provided, in order to support the changes in the common state machine
// internals.
message StepperState {
    enum State {
        // This is the state when no legal policy is in force.
        invalid = 0;

        // This is the state prior to initialization.
        awaiting_start = 1;

        // This state manages the policy where the simulated time is either
        // manually stepped forward, or, if a Delay operation is called, it jumps
        // forward to immediately complete any waiter.
        no_wait = 2;

        // This is the state where simulated time only moves forward due to
        // specific Step operations.
        manual = 3;

        // This is the state where simulated time moves forward by one tick per
        // the designated real time interval (e.g. 1 tick / second).
        measured = 4;

        // An internal fault has occurred.  This is a terminal state.
        faulted = 5;
    }

    State sm_state = 1;
}

// --- Stepper persisted state

// +++ trace sink specific messages

// Specify the trace entry to append to the trace sink's store
message AppendRequest {
    // The trace entry
    log.Entry entry = 1;
}

// Specify what trace entries to receive
message GetAfterRequest {
    // The last id that has been previously seen.  Note that '-1' will cause the
    // earliest traces to be returned
    int64 id = 1;

    // The maximum number of entries to return in in the reply.
    int64 max_entries = 2;

    // True, if the call should wait for new trace entries if there are none
    // that are later than the specified id when the call arrives.  If false,
    // the call returns immediately with no entries.
    bool wait = 3;
}

// Return the traces for the request
message GetAfterResponse {
    // The highest trace id returned.  Use this as the id on the next GetAfter
    // call in order to start returning the traces that immediately follow.
    int64 lastId = 1;

    // True, if some entries were skipped - probably due to removal at the
    // trace sink in order to stay within the retention limit
    bool missed = 2;

    message trace_entry {
        // Sequential id for this trace
        int64 id = 1;

        // Contents of the trace entry
        log.Entry entry = 2;
    }

    // Set of trace entries we're returning
    repeated trace_entry entries = 3;
}

// (Empty) payload to request the current policy
message GetPolicyRequest {

}

// Return the active policies for the trace sink service
message GetPolicyResponse {
    // The limit on the number of entries held in the trace sink
    int64 max_entries_held = 1;

    // Earliest trace entry currently held.
    int64 first_id = 2;
}

// --- trace sink specific messages
