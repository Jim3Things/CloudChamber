// Package main is used to generate a generated.go file which forms part of the version
// package which is used to provide build time derived versioning information to be
// embedded in the generated binaries.
//

// The following directive is necessary to make the package coherent, that is, it does
// not form part of the version package itself, but is a standalone file used to generate
// part of the package.
//
// Note: the VsCode linter requires a blank line after the ignore directive
//
// +build ignore

package main

import (
	"bytes"
	"log"
	"os"
	"os/exec"
	"strings"
	"text/template"
	"time"
)

const (
	version    = "v0.0.1"
	dateFormat = "20060102-1504 MST"
)

type BuildData struct {
BuildVersion    string
BuildHost       string
BuildDate       string
BuildBranch     string
BuildBranchDate string
BuildBranchHash string
}

func main() {
	hostname, err := os.Hostname()
	die(err)

	var data = BuildData{
		BuildVersion:    version,
		BuildHost:       hostname,
		BuildDate:       time.Now().Format(dateFormat),
		BuildBranch:     runCommand("git", "symbolic-ref", "--short", "HEAD"),
		BuildBranchDate: runCommand("git", "log", "-n", "1", "--pretty=format:%cI"),
		BuildBranchHash: runCommand("git", "log", "-n", "1", "--pretty=format:%H"),
	}

	writeGoFile(data)
	writeReadme(data)
}

func writeGoFile(data BuildData) {
	var packageTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at
// {{ .BuildDate }}
//
package version

var (
	BuildVersion    = {{ printf "%q" .BuildVersion }}
	BuildHost       = {{ printf "%q" .BuildHost }}
	BuildDate       = {{ printf "%q" .BuildDate }}
	BuildBranch     = {{ printf "%q" .BuildBranch }}
	BuildBranchDate = {{ printf "%q" .BuildBranchDate }}
	BuildBranchHash = {{ printf "%q" .BuildBranchHash }}
)
`))

	f, err := os.Create("generated.go")
	die(err)
	defer f.Close()

	packageTemplate.Execute(f, data)
}

func writeReadme(data BuildData) {
	var packageTemplate = template.Must(template.New("").Parse(`# README
Code generated by go generate; DO NOT EDIT.
This file was generated by robots at {{ .BuildDate }}

- Build Version: {{ printf "%q" .BuildVersion }}
- Build Host: {{ printf "%q" .BuildHost }}
- Build Date: {{ printf "%q" .BuildDate }}
- Build Branch: {{ printf "%q" .BuildBranch }}
- Build Branch Date: {{ printf "%q" .BuildBranchDate }}
- Build Branch Hash: {{ printf "%q" .BuildBranchHash }}
`))

	f, err := os.Create("version_stamp.md")
	die(err)
	defer f.Close()

	packageTemplate.Execute(f, data)
}

func die(err error) {
	if err != nil {
		log.Fatal(err)
	}
}

func runCommand(program string, args ...string) string {
	var out bytes.Buffer

	cmd := exec.Command(program, args...)
	cmd.Stdout = &out
	err := cmd.Run()

	die(err)

	return strings.TrimSuffix(out.String(), "\n")
}

