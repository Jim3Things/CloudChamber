syntax = "proto3";

package workload;

import "github.com/Jim3Things/CloudChamber/simulation/pkg/protos/inventory/capacity.proto";

option go_package = "github.com/Jim3Things/CloudChamber/simulation/pkg/protos/workload";
option csharp_namespace = "CloudChamber.Protos.Workload";

message External {
    // Define a disk volume
    message Volume {
        enum Attr {
            Invalid = 0;

            // Volume can be dynamically created, implicitly writable
            Creatable = 1;

            // Volume exists, and is write locked
            Write_locked = 2;

            // Volume exists, and is writable
            Writable = 3;
        }

        // Volume size in gigabytes
        int64 size_in_gb = 1;

        // Constraint on the volume type.
        Attr attribute = 2;

        // Address where the volume is located
        string uri = 3;
    }

    // Define a single instance
    message Instance {
        // Define the logical affinity group where this instance belongs.
        int64 affinity_group = 1;

        // Defined the required blade capacity used by this instance
        inventory.InstanceRequirements required_capacity = 2;

        // Boot volume name
        string system_name = 3;

        // all volumes, must include the boot volume
        map<string, Volume> volumes = 4;

        // configuration / metadata to pass to the instance
        string config = 5;
    }

    // Define the policy for how to manage affinity groups
    enum AffinityType {
        // No placement restrictions, ignore affinity groups
        None = 0;

        // Require that all instances within one affinity group are placed in the same fault domain
        Strong_Affinity = 1;

        // Attempt to place all instances within one affinity group into the same fault domain
        Weak_Affinity = 2;

        // Require that no two instances with differing affinity groups are placed in the same fault domain.  There is
        // no guarantee that two instances with the same affinity group will be placed in the same fault domain
        Strong_AntiAffinity = 3;

        // Attempt to place instances with different affinity groups into different fault domains
        Weak_AntiAffinity = 4;
    }

    // Define a workload.  This is a logical service made up of one or more instances
    message Workload {
        // Specify the workload's name
        string name = 1;

        // Specify the affinity policy to apply to the instances
        AffinityType affinity = 2;

        // Define the set of instances in this workload.  Each instance has a name that is unique within
        // the workload.  That name is used as the key in the instance map.
        map<string, Instance> instances = 3;
    }
}
