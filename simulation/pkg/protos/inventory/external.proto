// This file contains the definitions used by configuration and external commands for describing the simulated
// inventory.  These definitions describe the items, but do not define any status for them.
//
// Note that we may, at some point, want to add an initial status definition in order to define inventory that begins
// in a partially failed manner.

syntax = "proto3";

package inventory;

import "github.com/Jim3Things/CloudChamber/simulation/pkg/protos/inventory/capacity.proto";
import "github.com/Jim3Things/CloudChamber/simulation/pkg/protos/inventory/common.proto";

option go_package = "github.com/Jim3Things/CloudChamber/simulation/pkg/protos/inventory";
option csharp_namespace = "CloudChamber.Protos.Inventory";

message External {
    message ObservedCable {
        // The simulated time when the observation was made
        int64 at = 1;

        // The state the PDU was in at that time.
        CableState.SM sm_state = 2;

        // The simulated time when it entered this state.
        int64 entered_at = 3;
    }

    // Power distribution unit.  Network accessible power controller
    message Pdu {
        PduDetails details = 1;

        message Port {
            PowerPort port = 1;
            ObservedCable observed = 2;
        }

        // Defines a power "socket" which is used to provide power to a blade. There is
        // a 1 to 1 mapping of a power port to a blade within a single rack and it is an
        // error if there fewer power ports than blades.
        //
        map<int64, Port> ports = 2;

        // Observed, actual, and target data follows on from here...
        message ObservedState {
            // The simulated time when the observation was made
            int64 at = 1;

            // The state the PDU was in at that time.
            PduState.SM sm_state = 2;

            // The simulated time when it entered this state.
            int64 entered_at = 3;
        }
        ObservedState observed = 3;
    }

    // Rack-level network switch.
    message Tor {
        TorDetails details = 1;

        message Port {
            NetworkPort port = 1;
            ObservedCable observed = 2;
        }

        // Defines a network "port" which is used to provide a network connection to a
        // blade. There is a 1 to 1 mapping of a network port to a blade within a single
        // rack and it is an error if there fewer network ports than blades.
        //
        map<int64, Port> ports = 2;

        // Observed, actual, and target data follows on from here...
        message ObservedState {
            // The simulated time when the observation was made
            int64 at = 1;

            // The state the TOR was in at that time.
            TorState.SM sm_state = 2;

            // The simulated time when it entered this state.
            int64 entered_at = 3;
        }
        ObservedState observed = 3;
    }

    // Individual blade within the rack
    message Blade {
        BladeDetails details = 1;

        BladeCapacity capacity = 2;

        // Defines whether or not the blade automatically begins a boot sequence when power is
        // applied to the blade.
        bool boot_on_power_on = 3;

        // Describes the default boot mechanism
        BladeBootInfo boot_info = 4;

        // Observed, actual, and target data follows on from here...

        // Define the observed state for this blade
        message ObservedState {
            // The simulated time when the observation was made
            int64 at = 1;

            // The state the blade was in at that time.
            BladeState.SM sm_state = 2;

            // The simulated time when it entered this state.
            int64 entered_at = 3;
        }
        ObservedState observed = 5;
    }

    message Rack {
        RackDetails details = 1;

        // This assumes a single overhead item per rack.  May want to allow multiple to handle
        // subdivisions for power or network, say.

        Pdu pdu = 2;
        Tor tor = 3;

        // specify the blades in the rack.  Each blade is defined by an integer index within that
        // rack, which is used here as the key.
        map<int64, BladeCapacity> blades = 4;

        map<int64, Pdu> pdus = 5;
        map<int64, Tor> tors = 6;

        map<int64, Blade> fullBlades = 7;

        // Observed, actual, and target data (details) follows on from here...
    }

    // Finally, a zone is a collection of racks.  Each rack has a name, which is used as a key in
    // the map below.
    message Zone {
        map<string, Rack> racks = 1;
    }

    // The following messages are used to format JSON strings for use by
    // external callers.  These contain memoized calculations that are likely
    // to be needed by the common callers.

    // Rack list entry item
    message RackSummary {
        // host relative URI that can be used to retrieve its details
        string uri = 1;
    }

    // Summary of the full inventory
    message ZoneSummary {
        // Summary information about all known racks
        map<string, RackSummary> racks = 1;

        // The largest number of blades held in any rack
        int64 max_blade_count = 2;

        // The largest capacity values found in any blade
        BladeCapacity max_capacity = 3;

        // Overview detail
        ZoneDetails details = 4;

        // Friendly name for the zone
        string name = 5;

        // The largest number of TORs held in any rack.
        int64 max_tor_count = 6;

        // The largest number of PDUs held in any rack.
        int64 max_pdu_count = 7;

        // The largest number of connectors in either a TOR or a PDU.
        int64 max_connectors = 8;
    }
}
