// Defines the data structures used to describe the capacity of an inventory
// item. Capacity is a multi-dimensional aspect of any inventory item, since
// each item has multiple internal resources, any one or combination of which
// can be exhausted.
//
// The multi-dimensionality is important for schedulers to understand, as the
// exhaustion of one dimension can lead to a case where the other unused
// capacity dimensions are stranded.  For instance, if all cores are consumed
// then no free memory, disk, or other dimensions of a blade can be used.
syntax = "proto3";

package inventory;

option go_package = "github.com/Jim3Things/CloudChamber/simulation/pkg/protos/inventory";
option csharp_namespace = "CloudChamber.Protos.Inventory";

// Underlying condition of hardware items within the inventory. Allows control of the basic
// state of the item. Can be applied to racks, blades, tors, pdus, cables (power and network).
//
enum Condition {
    not_in_service = 0;
    operational = 1;
    burn_in = 2;
    out_for_repair = 3;
    retiring = 4;
    retired = 5;
}

// Underlying state of logical items within the inventory. Allows the basic state to be
// described. Applies to zones and regions.
//
enum State {
    out_of_service = 0;
    in_service = 1;
    commissioning = 2;
    assumed_failed = 3;
    decommissioning = 4;
    decommissioned = 5;
}


// Describes potential targets for wiring connections between a Pdu or Tor port and a specific
// item of equipment.
//
message Hardware {

    // Defines the type of hardware that can be wired up to a Pdu power port or a Tor network port.
    //
    enum HwType {
        // The type of hardware is not yet known
        //
        unknown = 0;

        // This item is a PDU (Power Distribution Unit).
        //
        pdu = 1;

        // Equipment is a TOR (Top of Rack network switch)
        //
        tor = 2;

        // Equipment is a blade computer
        //
        blade = 3;
    }

    // The type or item or piece of equipment
    //
    HwType type = 1;

    // Defines an instance of the piece of equipment. For example there are likely to be multiple
    // blades and the id is used to distinguish amongst them.
    //
    int64 id = 2;

    // If the item has multiple connectors, the port field can be used to indicate which connector
    // is used for this port.
    //
    int64 port = 3;
}

message CableState {
    // Determine if the cable is on (working) or off (disabled).
    enum SM {
        invalid = 0;
        on = 1;
        off = 2;
    }
}

message PowerPort {
    // Defines whether or not the port is actually connected to the associated item of equipment.
    //
    bool wired = 1;

    // Defines what the port is wired up to.
    //
    Hardware item = 2;
}

message NetworkPort {
    // Defines whether or not the port is actually connected to the associated item of equipment.
    //
    bool wired = 1;

    // Defines what the port is wired up to.
    //
    Hardware item = 2;
}

message BladeBootInfo {
    enum Method {
        local = 0;
        network = 1;
    }

    Method source = 1;
    string image = 2;
    string version = 3;
    string parameters = 4;
}

message BladeState {
    // This defines the blade simulation state machine states
    enum SM {
        invalid = 0;

        // This is the state where initialization of the state machine
        // begins.
        start = 1;

        // This is the state when the blade has neither simulated power
        // nor simulated network connectivity.
        off_disconnected = 2;

        // This is the state when the blade does not have power, but does
        // have simulated network connectivity.
        off_connected = 3;

        // This is the state when the blade has simulated power, but does
        // not have simulated network connectivity.
        powered_disconnected = 4;

        // This is the state when the blade has power and simulated network
        // connectivity.  If auto-boot is enabled, this state will
        // automatically transition to the booting state.
        powered_connected = 5;

        // This is the state when the blade is waiting for the simulated
        // boot delay to complete.
        booting = 6;

        // This is the state when the blade is powered on, booted, and
        // able to handle workload requests.
        working = 7;

        // This is the state when the blade is powered on and booted, but
        // has not simulated network connectivity.  Existing workloads are
        // informed the connectivity has been lost, but are otherwise
        // undisturbed.
        isolated = 8;

        // This is a transitional state to clean up when the blade is
        // finally shutting down.  This may involve notifying any active
        // workloads that they have been forcibly stopped.
        stopping = 9;

        // This is a transitional state parallel to the stopping state, but
        // where simulated network connectivity has been lost.
        stopping_isolated = 10;

        // This is the state when the blade has either had a processing
        // fault, such as a timer failure, or an injected fault that leaves
        // it in a position that requires an external reset/fix.
        faulted = 11;
    }
}

message PduState {
    // This defines the PDU state machine states
    enum SM {
        invalid = 0;

        // This is the state where the PDU is powered on and working.
        working = 1;

        // This is the state where the PDU is powered off.
        off = 2;

        // This is the state where the PDU is unresponsive, but power may or
        // may not still be on.
        stuck = 3;
    }
}

// Power distribution unit.  Network accessible power controller
//
message PduDetails {
    // Note that full internal name for a pdu is <rackname>-pdu-0

    // Whether or not the pdu is enabled. This is orthogonal to the condition of the
    // pdu. To schedule resources within the pdu, the pdu must be both enabled and
    // the condition must be operational.
    //
    bool enabled = 1;

    // Defines the overall condition of the pdu. This is orthogonal to the enabling of
    // the pdu. To schedule resources within the pdu, the pdu must be both enabled and
    // the condition must be operational.
    //
    Condition condition = 2;
}

message TorState {
    // This defines the state machine states
    enum SM {
        invalid = 0;

        working = 1;

        // The TOR is faulted and unresponsive. Note that programmed cables
        // may or may not continue to be programmed.
        stuck = 2;
    }
}

// Rack-level network switch.
//
message TorDetails {
    // Note that full internal name for a tor is <rackname>-tor-0

    // Whether or not the tor is enabled. This is orthogonal to the condition of the
    // tor. To schedule resources within the tor, the tor must be both enabled and
    // the condition must be operational.
    //
    bool enabled = 1;

    // Defines the overall condition of the tor. This is orthogonal to the enabling of
    // the tor. To schedule resources within the tor, the tor must be both enabled and
    // the condition must be operational.
    //
    Condition condition = 2;
}

// Rack-level blade computer
//
message BladeDetails {
    // Whether or not the blade is enabled. This is orthogonal to the condition of the
    // blade. To schedule resources within the blade, the blade must be both enabled
    // and the condition must be operational.
    //
    bool enabled = 1;

    // Defines the overall condition of the blade. This is orthogonal to the enabling of
    // the blade. To schedule resources within the blade, the blade must be both enabled
    // and the condition must be operational.
    //
    Condition condition = 2;
}

message RackDetails {
    // This assumes a single overhead item per rack.  May want to allow multiple to handle
    // subdivisions for power or network, say.

    // Whether or not the rack as a whole is enabled. This is orthogonal to the condition
    // of the rack. To schedule resources within the rack, the rack must be both enabled
    // and the condition must be operational.
    //
    bool enabled = 1;

    // Defines the overall condition of the rack. This is orthogonal to the enabling of
    // the rack. To schedule resources within the rack, the rack must be both enabled
    // and the condition must be operational.
    //
    Condition condition = 2;

    // Arbitrary string used to allow the physical location of the rack to be recorded in
    // a user defined format. Has no effect on the operation of the rack, for display
    // purposes only.
    //
    string location = 3;

    // Arbitrary string used to allow any operational notes for the blade to be recorded
    // in a user defined format. Has no effect on the operation of the rack, for display
    // purposes only.
    //
    string notes = 4;
}

message ZoneDetails {
    // Whether or not the zone as a whole is enabled. This is orthogonal to the condition
    // of the zone. To schedule resources within the zone, the zone must be both enabled
    // and the condition must be operational.
    //
    bool enabled = 1;

    // Defines the overall condition of the zone. This is orthogonal to the enabling of
    // the zone. To schedule resources within the zone, the zone must be both enabled
    // and the condition must be operational.
    //
    State state = 2;

    // Arbitrary string used to allow the physical location of the zone to be recorded in
    // a user defined format. Has no effect on the operation of the zone, for display
    // purposes only.
    //
    string location = 3;

    // Arbitrary string used to allow any operational notes for the zone to be recorded
    // in a user defined format. Has no effect on the operation of the zone, for display
    // purposes only.
    //
    string notes = 4;
}

message RegionDetails {
    // The name of a region.
    //
    // NOTE: Not sure we need an explicit name field since the name of the record is
    // implicit in identifying the record.
    //
    string name = 1;

    // Defines the overall condition of the region. To schedule resources within the
    // region, the region's condition must be operational.
    //
    State state = 2;

    // Arbitrary string used to allow the physical location of the zone to be recorded in
    // a user defined format. Has no effect on the operation of the zone, for display
    // purposes only.
    //
    string location = 3;

    // Arbitrary string used to allow any operational notes for the zone to be recorded
    // in a user defined format. Has no effect on the operation of the zone, for display
    // purposes only.
    //
    string notes = 4;
}

message RootDetails {
    // The name of the root of the configuration / simulation.
    //
    // NOTE: Not sure we need an explicit name field since the name of the record is
    // implicit in identifying the record.
    //
    string name = 1;

    // Arbitrary string used to allow any operational notes for the zone to be recorded
    // in a user defined format. Has no effect on the operation of the zone, for display
    // purposes only.
    //
    string notes = 4;
}

