// This file contains the data structures that define the actual state of one
// or more inventory items, as of the point in time when the structure is
// constructed.

syntax = "proto3";

package inventory;

import "github.com/Jim3Things/CloudChamber/simulation/pkg/protos/inventory/common.proto";

option go_package = "github.com/Jim3Things/CloudChamber/simulation/pkg/protos/inventory";
option csharp_namespace = "CloudChamber.Protos.Inventory";

message Actual {

    enum Condition {
        not_in_service = 0;
        operational = 1;
        faulted = 2;
    }

    // Cable represents the operational state of a simulated wire between a
    // component and a blade.  The target blade and port is determined by the
    // definition view, as it does not change.
    message Cable {
        // Determine if the cable is on (working) or off (disabled).
        enum State {
            invalid = 0;
            on = 1;
            off = 2;
        }
        State state = 1;

        // This is true if the cable is faulted such that it cannot be
        // controlled, and the on/off state is externally uncertain.
        bool faulted = 2;
    }

    // MachineCore holds the common state needed by the core state machine
    // infrastructure.
    message MachineCore {

        // This is the simulated time when the current state was entered.
        int64 entered_at = 1;

        // This is true if the state machine execution has completed.
        bool terminal = 2;

        // This is the guard time, used for handling of message overrun or
        // other external state change.
        int64 guard = 3;
    }

    message Pdu {
        // This indicates whether this element in operational, or in some other
        // lifecycle state.
        Condition condition = 1;

        // this holds the simulated cables attached to this element.
        map<int64, Cable> cables = 2;

        PduState.SM sm_state = 3;

        // This is the stored core state machine recovery state.
        MachineCore core = 4;
    }

    message Tor {
        // This indicates whether this element in operational, or in some other
        // lifecycle state.
        Condition condition = 1;

        // this holds the simulated cables attached to this element.
        map<int64, Cable> cables = 2;

        TorState.SM sm_state = 3;

        // This is the stored core state machine recovery state.
        MachineCore core = 4;
    }

    message Blade {
        // This indicates whether this element in operational, or in some other
        // lifecycle state.
        Condition condition = 1;

        BladeState.SM sm_state = 2;

        // This is the stored core state machine recovery state.
        MachineCore core = 3;

        bool state_expires = 4;
        int64 expiration = 5;
    }

    // NB: Given the rack's rather different lifecycle needs, this is mostly
    // latent at this time.
    message Rack {
        // This defines the state machine states
        enum State {
            invalid = 0;

            // This is the state when the rack is awaiting the start simulation
            // command.
            awaiting_start = 1;

            // This is the state during normal simulation operation.
            working = 2;

            // This is the state when the rack has processed a stop simulation
            // command.
            terminated = 3;
        }
        State sm_state = 1;

        // This is the stored core state machine recovery state.
        MachineCore core = 2;
    }
}


